{"file_contents":{"README.md":{"content":"# DrugAuth - Pharmaceutical Supply Chain DApp\n\nDrugAuth is a decentralized application (DApp) that provides secure tracking of pharmaceutical drug batches through every stage of the supply chain—from manufacturing to customer delivery—using Ethereum smart contracts and IPFS for document storage.\n\n![DrugAuth Dashboard](https://via.placeholder.com/800x400?text=DrugAuth+Dashboard)\n\n## Project Overview\n\nDrugAuth addresses the critical need for transparency and authenticity in pharmaceutical supply chains. By leveraging blockchain technology and IPFS, the platform ensures:\n\n- **Immutable Records**: Drug information is stored on Ethereum blockchain, making it tamper-proof\n- **Complete Traceability**: Track every transfer from manufacturer to end customer\n- **Document Security**: Certificates and documents stored securely on IPFS\n- **Role-Based Access**: Different permissions for manufacturers, distributors, pharmacists, and customers\n- **Real-time Verification**: Instant drug authenticity verification via QR codes\n\n### Technologies Used\n\n- **Frontend**: React (Vite), Tailwind CSS, Ethers.js\n- **Smart Contracts**: Solidity, Hardhat, OpenZeppelin\n- **Blockchain**: Ethereum Goerli Testnet\n- **Storage**: IPFS via Web3.Storage\n- **Wallet Integration**: MetaMask\n\n## Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- [Node.js](https://nodejs.org/) (v16.0.0 or later)\n- [npm](https://www.npmjs.com/) or [yarn](https://yarnpkg.com/)\n- [MetaMask](https://metamask.io/) browser extension\n- [Git](https://git-scm.com/)\n\n### Required Accounts & API Keys\n\n1. **MetaMask Wallet**: Install and set up MetaMask\n2. **Infura Account**: Sign up at [infura.io](https://infura.io/) for Ethereum API access\n3. **Web3.Storage Account**: Register at [web3.storage](https://web3.storage/) for IPFS storage\n4. **Etherscan Account**: Register at [etherscan.io](https://etherscan.io/) for contract verification (optional)\n5. **Goerli ETH**: Obtain test ETH from [Goerli Faucet](https://goerlifaucet.com/)\n\n## Installation Guide\n\n### 1. Clone the Repository\n\n```bash\ngit clone https://github.com/your-username/drugauth-dapp.git\ncd drugauth-dapp\n","size_bytes":2161},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"hardhat.config.js":{"content":"require(\"@nomicfoundation/hardhat-toolbox\");\nrequire(\"dotenv\").config();\n\nconst GOERLI_PRIVATE_KEY = process.env.GOERLI_PRIVATE_KEY || \"\";\nconst INFURA_API_KEY = process.env.INFURA_API_KEY || \"\";\nconst ETHERSCAN_API_KEY = process.env.ETHERSCAN_API_KEY || \"\";\n\n/** @type import('hardhat/config').HardhatUserConfig */\nmodule.exports = {\n  solidity: {\n    version: \"0.8.19\",\n    settings: {\n      optimizer: {\n        enabled: true,\n        runs: 200,\n      },\n    },\n  },\n  networks: {\n    goerli: {\n      url: `https://goerli.infura.io/v3/${INFURA_API_KEY}`,\n      accounts: GOERLI_PRIVATE_KEY ? [GOERLI_PRIVATE_KEY] : [],\n      gas: 2100000,\n      gasPrice: 8000000000,\n    },\n    localhost: {\n      url: \"http://127.0.0.1:8545\",\n    },\n  },\n  etherscan: {\n    apiKey: ETHERSCAN_API_KEY,\n  },\n  paths: {\n    sources: \"./contracts\",\n    tests: \"./test\",\n    cache: \"./cache\",\n    artifacts: \"./artifacts\",\n  },\n  mocha: {\n    timeout: 20000,\n  },\n};\n","size_bytes":949},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nDrugAuth is a decentralized application (DApp) that provides secure tracking of pharmaceutical drug batches through every stage of the supply chain—from manufacturing to customer delivery. The system leverages Ethereum blockchain technology for immutable record keeping and IPFS for secure document storage, ensuring complete traceability and authenticity verification of pharmaceutical products.\n\nThe application addresses critical needs in pharmaceutical supply chains by providing tamper-proof records, complete traceability from manufacturer to end customer, secure document storage, role-based access control, and real-time drug authenticity verification via QR codes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Full-Stack Architecture\nThe application follows a monolithic full-stack architecture with clear separation between frontend and backend concerns. The main entry point is a Node.js/Express server that serves both API endpoints and the React frontend in production, while using Vite for development.\n\n## Frontend Architecture\n- **Framework**: React with Vite for fast development and optimized builds\n- **Styling**: Tailwind CSS with shadcn/ui component library for consistent UI design\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **Routing**: Wouter for lightweight client-side routing\n- **Blockchain Integration**: Ethers.js for Ethereum blockchain interactions and MetaMask wallet integration\n- **Form Handling**: React Hook Form with Zod schema validation for type-safe form management\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **API Design**: RESTful API with clear endpoint structure for drug batches, supply chain events, and verification\n- **Storage Strategy**: Hybrid approach using in-memory storage for development and PostgreSQL for production\n\n## Blockchain Layer\n- **Smart Contracts**: Solidity contracts deployed on Ethereum Goerli testnet\n- **Development Tools**: Hardhat for contract compilation, testing, and deployment\n- **Gas Optimization**: Optimized contract settings with 200 runs for efficient deployment\n- **Network Configuration**: Support for both local development (Hardhat network) and Goerli testnet\n\n## Data Storage Solutions\n- **Primary Database**: PostgreSQL with structured tables for drug batches, supply chain events, and user management\n- **Schema Management**: Drizzle ORM with TypeScript schemas ensuring type safety across the application\n- **Off-chain Storage**: IPFS via Web3.Storage for storing certificates and documents (free up to 5GB)\n- **Session Management**: PostgreSQL-based session storage using connect-pg-simple\n\n## Authentication and Authorization\n- **Wallet-Based Authentication**: MetaMask wallet integration for user authentication\n- **Role-Based Access Control**: Five distinct roles (manufacturer, producer, distributor, pharmacist, customer) with appropriate permissions\n- **Address Validation**: Ethereum address validation and verification throughout the application\n\n## Key Features Implementation\n- **Drug Registration**: Form-based interface for entering drug metadata with IPFS certificate upload\n- **Ownership Tracking**: Smart contract-based transfer system maintaining complete audit trail\n- **Verification System**: Batch ID-based drug lookup with full transaction history display\n- **QR Code Generation**: Dynamic QR code creation for easy drug lifecycle tracking\n- **Supply Chain Timeline**: Visual representation of drug journey through supply chain stages\n\n# External Dependencies\n\n## Blockchain Infrastructure\n- **Ethereum Goerli Testnet**: Primary blockchain network for smart contract deployment\n- **Infura**: Ethereum API provider for reliable blockchain connectivity\n- **MetaMask**: Browser extension wallet for user authentication and transaction signing\n- **Etherscan**: Block explorer integration for contract verification and transaction tracking\n\n## Storage Services\n- **Web3.Storage**: IPFS storage service for pharmaceutical certificates and documents\n- **Neon Database**: PostgreSQL hosting service via @neondatabase/serverless\n\n## Development and Deployment\n- **Vite**: Frontend build tool and development server\n- **Hardhat**: Ethereum development environment for smart contract development\n- **OpenZeppelin**: Smart contract security library for secure contract patterns\n\n## UI and Component Libraries\n- **Radix UI**: Headless UI components for accessible and customizable interface elements\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **QRCode**: Library for generating QR codes for drug verification\n\n## API and Network\n- **TanStack Query**: Server state management and API caching\n- **Wouter**: Lightweight routing library for single-page application navigation\n- **React Hook Form**: Form state management with validation\n- **Zod**: Schema validation library for type-safe data handling\n\n## Testing and Quality\n- **TypeScript**: Static type checking throughout the application\n- **ESLint**: Code linting for consistent code quality\n- **Hardhat Testing Framework**: Smart contract testing infrastructure","size_bytes":5339},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        neutral: \"var(--neutral)\",\n        surface: \"var(--surface)\",\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\", \"Inter\", \"sans-serif\"],\n        serif: [\"var(--font-serif)\", \"Georgia\", \"serif\"],\n        mono: [\"var(--font-mono)\", \"Monaco\", \"Menlo\", \"monospace\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2911},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"contracts/DrugAuth.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.19;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\n\ncontract DrugAuth is ERC721, ERC721Enumerable, Ownable {\n    using Counters for Counters.Counter;\n    Counters.Counter private _tokenIdCounter;\n\n    struct Drug {\n        string batchId;\n        string drugName;\n        string manufacturer;\n        uint256 expiryDate;\n        string ipfsHash;\n        address currentOwner;\n        uint256 timestamp;\n        bool isActive;\n    }\n\n    struct TransferEvent {\n        address from;\n        address to;\n        uint256 timestamp;\n        string eventType; // \"manufacture\", \"transfer\", \"verify\"\n    }\n\n    mapping(uint256 => Drug) public drugs;\n    mapping(string => uint256) public batchIdToTokenId;\n    mapping(uint256 => TransferEvent[]) public drugHistory;\n    mapping(address => string) public userRoles;\n\n    event DrugRegistered(\n        uint256 indexed tokenId,\n        string batchId,\n        address indexed owner,\n        string drugName,\n        string manufacturer\n    );\n\n    event OwnershipTransferred(\n        uint256 indexed tokenId,\n        address indexed from,\n        address indexed to,\n        string eventType\n    );\n\n    event RoleAssigned(address indexed user, string role);\n\n    modifier onlyAuthorizedRole(string memory role) {\n        require(\n            keccak256(abi.encodePacked(userRoles[msg.sender])) == keccak256(abi.encodePacked(role)) ||\n            keccak256(abi.encodePacked(userRoles[msg.sender])) == keccak256(abi.encodePacked(\"manufacturer\")),\n            \"Unauthorized role\"\n        );\n        _;\n    }\n\n    modifier onlyTokenOwner(uint256 tokenId) {\n        require(ownerOf(tokenId) == msg.sender, \"Not the token owner\");\n        _;\n    }\n\n    constructor() ERC721(\"DrugAuth\", \"DRUG\") {\n        // Assign owner as manufacturer by default\n        userRoles[msg.sender] = \"manufacturer\";\n    }\n\n    function registerDrug(\n        string memory batchId,\n        string memory drugName,\n        string memory manufacturer,\n        uint256 expiryDate,\n        string memory ipfsHash\n    ) public returns (uint256) {\n        require(bytes(batchId).length > 0, \"Batch ID cannot be empty\");\n        require(bytes(drugName).length > 0, \"Drug name cannot be empty\");\n        require(bytes(manufacturer).length > 0, \"Manufacturer cannot be empty\");\n        require(expiryDate > block.timestamp, \"Expiry date must be in the future\");\n        require(batchIdToTokenId[batchId] == 0, \"Batch ID already exists\");\n\n        _tokenIdCounter.increment();\n        uint256 tokenId = _tokenIdCounter.current();\n\n        _safeMint(msg.sender, tokenId);\n\n        drugs[tokenId] = Drug({\n            batchId: batchId,\n            drugName: drugName,\n            manufacturer: manufacturer,\n            expiryDate: expiryDate,\n            ipfsHash: ipfsHash,\n            currentOwner: msg.sender,\n            timestamp: block.timestamp,\n            isActive: true\n        });\n\n        batchIdToTokenId[batchId] = tokenId;\n\n        // Record the initial manufacturing event\n        drugHistory[tokenId].push(TransferEvent({\n            from: address(0),\n            to: msg.sender,\n            timestamp: block.timestamp,\n            eventType: \"manufacture\"\n        }));\n\n        emit DrugRegistered(tokenId, batchId, msg.sender, drugName, manufacturer);\n\n        return tokenId;\n    }\n\n    function transferOwnership(\n        uint256 tokenId,\n        address to,\n        string memory eventType\n    ) public onlyTokenOwner(tokenId) {\n        require(to != address(0), \"Cannot transfer to zero address\");\n        require(to != ownerOf(tokenId), \"Cannot transfer to current owner\");\n        require(drugs[tokenId].isActive, \"Drug is not active\");\n        require(drugs[tokenId].expiryDate > block.timestamp, \"Drug has expired\");\n\n        address from = ownerOf(tokenId);\n        \n        _transfer(from, to, tokenId);\n        drugs[tokenId].currentOwner = to;\n\n        // Record the transfer event\n        drugHistory[tokenId].push(TransferEvent({\n            from: from,\n            to: to,\n            timestamp: block.timestamp,\n            eventType: eventType\n        }));\n\n        emit OwnershipTransferred(tokenId, from, to, eventType);\n    }\n\n    function verifyDrug(uint256 tokenId) public view returns (Drug memory) {\n        require(_exists(tokenId), \"Drug does not exist\");\n        return drugs[tokenId];\n    }\n\n    function verifyDrugByBatchId(string memory batchId) public view returns (Drug memory) {\n        uint256 tokenId = batchIdToTokenId[batchId];\n        require(tokenId != 0, \"Batch ID does not exist\");\n        return drugs[tokenId];\n    }\n\n    function getDrugHistory(uint256 tokenId) public view returns (TransferEvent[] memory) {\n        require(_exists(tokenId), \"Drug does not exist\");\n        return drugHistory[tokenId];\n    }\n\n    function deactivateDrug(uint256 tokenId) public onlyTokenOwner(tokenId) {\n        drugs[tokenId].isActive = false;\n    }\n\n    function assignRole(address user, string memory role) public onlyOwner {\n        userRoles[user] = role;\n        emit RoleAssigned(user, role);\n    }\n\n    function getUserRole(address user) public view returns (string memory) {\n        return userRoles[user];\n    }\n\n    function getDrugsByOwner(address owner) public view returns (uint256[] memory) {\n        uint256 balance = balanceOf(owner);\n        uint256[] memory tokenIds = new uint256[](balance);\n        \n        for (uint256 i = 0; i < balance; i++) {\n            tokenIds[i] = tokenOfOwnerByIndex(owner, i);\n        }\n        \n        return tokenIds;\n    }\n\n    function totalDrugs() public view returns (uint256) {\n        return _tokenIdCounter.current();\n    }\n\n    // Override required functions\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 batchSize\n    ) internal override(ERC721, ERC721Enumerable) {\n        super._beforeTokenTransfer(from, to, tokenId, batchSize);\n    }\n\n    function supportsInterface(bytes4 interfaceId)\n        public\n        view\n        override(ERC721, ERC721Enumerable)\n        returns (bool)\n    {\n        return super.supportsInterface(interfaceId);\n    }\n}\n","size_bytes":6384},"scripts/deploy.js":{"content":"const hre = require(\"hardhat\");\n\nasync function main() {\n  console.log(\"Starting deployment...\");\n\n  // Get the ContractFactory and Signers\n  const [deployer] = await hre.ethers.getSigners();\n  console.log(\"Deploying contracts with the account:\", deployer.address);\n\n  // Check balance\n  const balance = await deployer.provider.getBalance(deployer.address);\n  console.log(\"Account balance:\", hre.ethers.formatEther(balance), \"ETH\");\n\n  // Deploy the DrugAuth contract\n  console.log(\"Deploying DrugAuth contract...\");\n  const DrugAuth = await hre.ethers.getContractFactory(\"DrugAuth\");\n  const drugAuth = await DrugAuth.deploy();\n\n  await drugAuth.waitForDeployment();\n  const contractAddress = await drugAuth.getAddress();\n\n  console.log(\"DrugAuth contract deployed to:\", contractAddress);\n\n  // Verify contract on Etherscan (optional)\n  if (hre.network.name === \"goerli\") {\n    console.log(\"Waiting for block confirmations...\");\n    await drugAuth.deploymentTransaction().wait(5);\n\n    try {\n      console.log(\"Verifying contract on Etherscan...\");\n      await hre.run(\"verify:verify\", {\n        address: contractAddress,\n        constructorArguments: [],\n      });\n      console.log(\"Contract verified successfully\");\n    } catch (error) {\n      console.log(\"Error verifying contract:\", error.message);\n    }\n  }\n\n  // Save deployment info\n  const deploymentInfo = {\n    network: hre.network.name,\n    contractAddress: contractAddress,\n    deployer: deployer.address,\n    deploymentTime: new Date().toISOString(),\n    transactionHash: drugAuth.deploymentTransaction().hash,\n  };\n\n  console.log(\"\\n=== Deployment Summary ===\");\n  console.log(\"Network:\", deploymentInfo.network);\n  console.log(\"Contract Address:\", deploymentInfo.contractAddress);\n  console.log(\"Deployer:\", deploymentInfo.deployer);\n  console.log(\"Transaction Hash:\", deploymentInfo.transactionHash);\n  console.log(\"Deployment Time:\", deploymentInfo.deploymentTime);\n\n  console.log(\"\\n=== Environment Variables ===\");\n  console.log(`VITE_CONTRACT_ADDRESS=${contractAddress}`);\n  console.log(`CONTRACT_ADDRESS=${contractAddress}`);\n\n  return deploymentInfo;\n}\n\n// Error handling\nmain()\n  .then(() => process.exit(0))\n  .catch((error) => {\n    console.error(\"Deployment failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":2281},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertDrugBatchSchema, insertSupplyChainEventSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Drug batch routes\n  app.get(\"/api/drug-batches\", async (req, res) => {\n    try {\n      const page = parseInt(req.query.page as string) || 1;\n      const limit = parseInt(req.query.limit as string) || 10;\n      const offset = (page - 1) * limit;\n\n      const batches = await storage.getDrugBatches(limit, offset);\n      res.json(batches);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/drug-batches/owned/:address\", async (req, res) => {\n    try {\n      const { address } = req.params;\n      const batches = await storage.getDrugBatchesByOwner(address);\n      res.json(batches);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/drug-batches/verify/:batchId\", async (req, res) => {\n    try {\n      const { batchId } = req.params;\n      const decodedBatchId = decodeURIComponent(batchId);\n      \n      const drug = await storage.getDrugBatchByBatchId(decodedBatchId);\n      if (!drug) {\n        return res.status(404).json({ message: \"Drug batch not found\" });\n      }\n\n      const events = await storage.getSupplyChainEventsByBatchId(decodedBatchId);\n      res.json({ drug, events });\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/drug-batches/track/:batchId\", async (req, res) => {\n    try {\n      const { batchId } = req.params;\n      const decodedBatchId = decodeURIComponent(batchId);\n      \n      const drug = await storage.getDrugBatchByBatchId(decodedBatchId);\n      if (!drug) {\n        return res.status(404).json({ message: \"Drug batch not found\" });\n      }\n\n      const events = await storage.getSupplyChainEventsByBatchId(decodedBatchId);\n      res.json({ drug, events });\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.get(\"/api/drug-batches/history/:batchId\", async (req, res) => {\n    try {\n      const { batchId } = req.params;\n      const decodedBatchId = decodeURIComponent(batchId);\n      \n      const events = await storage.getSupplyChainEventsByBatchId(decodedBatchId);\n      res.json(events);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/drug-batches\", async (req, res) => {\n    try {\n      const validatedData = insertDrugBatchSchema.parse(req.body);\n      const drugBatch = await storage.createDrugBatch(validatedData);\n      \n      // Create initial manufacturing event\n      const manufacturingEvent = await storage.createSupplyChainEvent({\n        batchId: drugBatch.batchId,\n        toOwner: drugBatch.currentOwner,\n        toOwnerAddress: drugBatch.currentOwnerAddress,\n        eventType: \"manufacture\",\n      });\n\n      res.status(201).json({ drugBatch, event: manufacturingEvent });\n    } catch (error) {\n      if (error instanceof Error && error.name === \"ZodError\") {\n        return res.status(400).json({ message: \"Validation error\", details: error });\n      }\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  app.post(\"/api/drug-batches/transfer\", async (req, res) => {\n    try {\n      const { batchId, newOwner, newOwnerAddress, eventType, transactionHash } = req.body;\n      \n      if (!batchId || !newOwner || !newOwnerAddress || !eventType) {\n        return res.status(400).json({ message: \"Missing required fields\" });\n      }\n\n      // Get current drug batch\n      const currentDrug = await storage.getDrugBatchByBatchId(batchId);\n      if (!currentDrug) {\n        return res.status(404).json({ message: \"Drug batch not found\" });\n      }\n\n      // Update drug batch ownership\n      const updatedDrug = await storage.updateDrugBatch(currentDrug.id, {\n        currentOwner: newOwner,\n        currentOwnerAddress: newOwnerAddress,\n        status: eventType === \"deliver\" ? \"delivered\" : \"in_transit\",\n        updatedAt: new Date(),\n      });\n\n      // Create transfer event\n      const transferEvent = await storage.createSupplyChainEvent({\n        batchId,\n        fromOwner: currentDrug.currentOwner,\n        toOwner: newOwner,\n        fromOwnerAddress: currentDrug.currentOwnerAddress,\n        toOwnerAddress: newOwnerAddress,\n        eventType,\n        transactionHash,\n      });\n\n      res.json({ drugBatch: updatedDrug, event: transferEvent });\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  // Dashboard stats\n  app.get(\"/api/dashboard/stats\", async (req, res) => {\n    try {\n      const stats = await storage.getDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: error instanceof Error ? error.message : \"Internal server error\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":5410},"server/storage.ts":{"content":"import { type User, type InsertUser, type DrugBatch, type InsertDrugBatch, type SupplyChainEvent, type InsertSupplyChainEvent } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Drug batch methods\n  getDrugBatches(limit?: number, offset?: number): Promise<DrugBatch[]>;\n  getDrugBatchById(id: string): Promise<DrugBatch | undefined>;\n  getDrugBatchByBatchId(batchId: string): Promise<DrugBatch | undefined>;\n  getDrugBatchesByOwner(ownerAddress: string): Promise<DrugBatch[]>;\n  createDrugBatch(drugBatch: InsertDrugBatch): Promise<DrugBatch>;\n  updateDrugBatch(id: string, updates: Partial<DrugBatch>): Promise<DrugBatch>;\n\n  // Supply chain event methods\n  getSupplyChainEventsByBatchId(batchId: string): Promise<SupplyChainEvent[]>;\n  createSupplyChainEvent(event: InsertSupplyChainEvent): Promise<SupplyChainEvent>;\n\n  // Dashboard stats\n  getDashboardStats(): Promise<{\n    totalBatches: number;\n    activeTransfers: number;\n    verifiedDrugs: number;\n    gasUsed: string;\n  }>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private drugBatches: Map<string, DrugBatch>;\n  private supplyChainEvents: Map<string, SupplyChainEvent>;\n\n  constructor() {\n    this.users = new Map();\n    this.drugBatches = new Map();\n    this.supplyChainEvents = new Map();\n  }\n\n  // User methods\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { \n      ...insertUser, \n      id,\n      role: insertUser.role || \"customer\",\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  // Drug batch methods\n  async getDrugBatches(limit: number = 10, offset: number = 0): Promise<DrugBatch[]> {\n    const allBatches = Array.from(this.drugBatches.values())\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n    \n    return allBatches.slice(offset, offset + limit);\n  }\n\n  async getDrugBatchById(id: string): Promise<DrugBatch | undefined> {\n    return this.drugBatches.get(id);\n  }\n\n  async getDrugBatchByBatchId(batchId: string): Promise<DrugBatch | undefined> {\n    return Array.from(this.drugBatches.values()).find(\n      (batch) => batch.batchId === batchId\n    );\n  }\n\n  async getDrugBatchesByOwner(ownerAddress: string): Promise<DrugBatch[]> {\n    return Array.from(this.drugBatches.values())\n      .filter((batch) => batch.currentOwnerAddress.toLowerCase() === ownerAddress.toLowerCase())\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createDrugBatch(insertDrugBatch: InsertDrugBatch): Promise<DrugBatch> {\n    const id = randomUUID();\n    const drugBatch: DrugBatch = {\n      ...insertDrugBatch,\n      id,\n      manufacturingDate: new Date(insertDrugBatch.manufacturingDate),\n      expiryDate: new Date(insertDrugBatch.expiryDate),\n      status: insertDrugBatch.status || \"manufactured\",\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.drugBatches.set(id, drugBatch);\n    return drugBatch;\n  }\n\n  async updateDrugBatch(id: string, updates: Partial<DrugBatch>): Promise<DrugBatch> {\n    const existing = this.drugBatches.get(id);\n    if (!existing) {\n      throw new Error(\"Drug batch not found\");\n    }\n\n    const updated: DrugBatch = {\n      ...existing,\n      ...updates,\n      updatedAt: new Date(),\n    };\n\n    this.drugBatches.set(id, updated);\n    return updated;\n  }\n\n  // Supply chain event methods\n  async getSupplyChainEventsByBatchId(batchId: string): Promise<SupplyChainEvent[]> {\n    return Array.from(this.supplyChainEvents.values())\n      .filter((event) => event.batchId === batchId)\n      .sort((a, b) => new Date(a.timestamp!).getTime() - new Date(b.timestamp!).getTime());\n  }\n\n  async createSupplyChainEvent(insertEvent: InsertSupplyChainEvent): Promise<SupplyChainEvent> {\n    const id = randomUUID();\n    const event: SupplyChainEvent = {\n      ...insertEvent,\n      id,\n      fromOwner: insertEvent.fromOwner || null,\n      fromOwnerAddress: insertEvent.fromOwnerAddress || null,\n      transactionHash: insertEvent.transactionHash || null,\n      blockNumber: insertEvent.blockNumber || null,\n      timestamp: new Date(),\n    };\n    this.supplyChainEvents.set(id, event);\n    return event;\n  }\n\n  // Dashboard stats\n  async getDashboardStats(): Promise<{\n    totalBatches: number;\n    activeTransfers: number;\n    verifiedDrugs: number;\n    gasUsed: string;\n  }> {\n    const totalBatches = this.drugBatches.size;\n    const activeTransfers = Array.from(this.drugBatches.values())\n      .filter((batch) => batch.status === \"in_transit\").length;\n    const verifiedDrugs = Array.from(this.drugBatches.values())\n      .filter((batch) => batch.status !== \"expired\").length;\n    \n    return {\n      totalBatches,\n      activeTransfers,\n      verifiedDrugs,\n      gasUsed: \"0.0234\", // Mock value for gas usage\n    };\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":5425},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  role: text(\"role\").notNull().default(\"customer\"), // manufacturer, producer, distributor, pharmacist, customer\n  walletAddress: text(\"wallet_address\").unique(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const drugBatches = pgTable(\"drug_batches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchId: text(\"batch_id\").notNull().unique(),\n  drugName: text(\"drug_name\").notNull(),\n  manufacturer: text(\"manufacturer\").notNull(),\n  manufacturingDate: timestamp(\"manufacturing_date\").notNull(),\n  expiryDate: timestamp(\"expiry_date\").notNull(),\n  currentOwner: text(\"current_owner\").notNull(),\n  currentOwnerAddress: text(\"current_owner_address\").notNull(),\n  status: text(\"status\").notNull().default(\"manufactured\"), // manufactured, in_transit, delivered, expired\n  ipfsHash: text(\"ipfs_hash\"),\n  contractAddress: text(\"contract_address\"),\n  tokenId: integer(\"token_id\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const supplyChainEvents = pgTable(\"supply_chain_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  batchId: text(\"batch_id\").notNull(),\n  fromOwner: text(\"from_owner\"),\n  toOwner: text(\"to_owner\").notNull(),\n  fromOwnerAddress: text(\"from_owner_address\"),\n  toOwnerAddress: text(\"to_owner_address\").notNull(),\n  eventType: text(\"event_type\").notNull(), // manufacture, transfer, verify\n  transactionHash: text(\"transaction_hash\"),\n  blockNumber: integer(\"block_number\"),\n  timestamp: timestamp(\"timestamp\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n  role: true,\n  walletAddress: true,\n});\n\nexport const insertDrugBatchSchema = createInsertSchema(drugBatches).pick({\n  batchId: true,\n  drugName: true,\n  manufacturer: true,\n  manufacturingDate: true,\n  expiryDate: true,\n  currentOwner: true,\n  currentOwnerAddress: true,\n  status: true,\n  ipfsHash: true,\n  contractAddress: true,\n  tokenId: true,\n});\n\nexport const insertSupplyChainEventSchema = createInsertSchema(supplyChainEvents).pick({\n  batchId: true,\n  fromOwner: true,\n  toOwner: true,\n  fromOwnerAddress: true,\n  toOwnerAddress: true,\n  eventType: true,\n  transactionHash: true,\n  blockNumber: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertDrugBatch = z.infer<typeof insertDrugBatchSchema>;\nexport type DrugBatch = typeof drugBatches.$inferSelect;\nexport type InsertSupplyChainEvent = z.infer<typeof insertSupplyChainEventSchema>;\nexport type SupplyChainEvent = typeof supplyChainEvents.$inferSelect;\n","size_bytes":3084},"test/DrugAuth.test.js":{"content":"const { expect } = require(\"chai\");\nconst { ethers } = require(\"hardhat\");\n\ndescribe(\"DrugAuth\", function () {\n  let drugAuth;\n  let owner, manufacturer, distributor, pharmacy, customer;\n  let drugData;\n\n  beforeEach(async function () {\n    [owner, manufacturer, distributor, pharmacy, customer] = await ethers.getSigners();\n\n    const DrugAuth = await ethers.getContractFactory(\"DrugAuth\");\n    drugAuth = await DrugAuth.deploy();\n    await drugAuth.waitForDeployment();\n\n    // Sample drug data\n    drugData = {\n      batchId: \"BTC-2024-001\",\n      drugName: \"Paracetamol 500mg\",\n      manufacturer: \"PharmaCorp Ltd.\",\n      expiryDate: Math.floor(Date.now() / 1000) + 365 * 24 * 60 * 60, // 1 year from now\n      ipfsHash: \"QmTestHash123456789\",\n    };\n  });\n\n  describe(\"Drug Registration\", function () {\n    it(\"Should register a new drug successfully\", async function () {\n      const tx = await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n\n      const receipt = await tx.wait();\n      const tokenId = 1; // First token ID should be 1\n\n      // Check if drug is registered correctly\n      const drug = await drugAuth.verifyDrug(tokenId);\n      expect(drug.batchId).to.equal(drugData.batchId);\n      expect(drug.drugName).to.equal(drugData.drugName);\n      expect(drug.manufacturer).to.equal(drugData.manufacturer);\n      expect(drug.currentOwner).to.equal(owner.address);\n      expect(drug.isActive).to.be.true;\n    });\n\n    it(\"Should emit DrugRegistered event\", async function () {\n      await expect(\n        drugAuth.registerDrug(\n          drugData.batchId,\n          drugData.drugName,\n          drugData.manufacturer,\n          drugData.expiryDate,\n          drugData.ipfsHash\n        )\n      )\n        .to.emit(drugAuth, \"DrugRegistered\")\n        .withArgs(1, drugData.batchId, owner.address, drugData.drugName, drugData.manufacturer);\n    });\n\n    it(\"Should fail with duplicate batch ID\", async function () {\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n\n      await expect(\n        drugAuth.registerDrug(\n          drugData.batchId,\n          \"Another Drug\",\n          \"Another Manufacturer\",\n          drugData.expiryDate,\n          drugData.ipfsHash\n        )\n      ).to.be.revertedWith(\"Batch ID already exists\");\n    });\n\n    it(\"Should fail with empty batch ID\", async function () {\n      await expect(\n        drugAuth.registerDrug(\n          \"\",\n          drugData.drugName,\n          drugData.manufacturer,\n          drugData.expiryDate,\n          drugData.ipfsHash\n        )\n      ).to.be.revertedWith(\"Batch ID cannot be empty\");\n    });\n\n    it(\"Should fail with past expiry date\", async function () {\n      const pastDate = Math.floor(Date.now() / 1000) - 86400; // Yesterday\n\n      await expect(\n        drugAuth.registerDrug(\n          drugData.batchId,\n          drugData.drugName,\n          drugData.manufacturer,\n          pastDate,\n          drugData.ipfsHash\n        )\n      ).to.be.revertedWith(\"Expiry date must be in the future\");\n    });\n  });\n\n  describe(\"Ownership Transfer\", function () {\n    let tokenId;\n\n    beforeEach(async function () {\n      const tx = await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n      tokenId = 1;\n    });\n\n    it(\"Should transfer ownership successfully\", async function () {\n      await drugAuth.transferOwnership(tokenId, manufacturer.address, \"transfer\");\n\n      const newOwner = await drugAuth.ownerOf(tokenId);\n      expect(newOwner).to.equal(manufacturer.address);\n\n      const drug = await drugAuth.verifyDrug(tokenId);\n      expect(drug.currentOwner).to.equal(manufacturer.address);\n    });\n\n    it(\"Should emit OwnershipTransferred event\", async function () {\n      await expect(drugAuth.transferOwnership(tokenId, manufacturer.address, \"transfer\"))\n        .to.emit(drugAuth, \"OwnershipTransferred\")\n        .withArgs(tokenId, owner.address, manufacturer.address, \"transfer\");\n    });\n\n    it(\"Should record transfer in drug history\", async function () {\n      await drugAuth.transferOwnership(tokenId, manufacturer.address, \"transfer\");\n\n      const history = await drugAuth.getDrugHistory(tokenId);\n      expect(history.length).to.equal(2); // manufacture + transfer\n      expect(history[1].from).to.equal(owner.address);\n      expect(history[1].to).to.equal(manufacturer.address);\n      expect(history[1].eventType).to.equal(\"transfer\");\n    });\n\n    it(\"Should fail when transferring to same owner\", async function () {\n      await expect(\n        drugAuth.transferOwnership(tokenId, owner.address, \"transfer\")\n      ).to.be.revertedWith(\"Cannot transfer to current owner\");\n    });\n\n    it(\"Should fail when not token owner\", async function () {\n      await expect(\n        drugAuth.connect(manufacturer).transferOwnership(tokenId, distributor.address, \"transfer\")\n      ).to.be.revertedWith(\"Not the token owner\");\n    });\n  });\n\n  describe(\"Drug Verification\", function () {\n    let tokenId;\n\n    beforeEach(async function () {\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n      tokenId = 1;\n    });\n\n    it(\"Should verify drug by token ID\", async function () {\n      const drug = await drugAuth.verifyDrug(tokenId);\n      expect(drug.batchId).to.equal(drugData.batchId);\n      expect(drug.drugName).to.equal(drugData.drugName);\n      expect(drug.isActive).to.be.true;\n    });\n\n    it(\"Should verify drug by batch ID\", async function () {\n      const drug = await drugAuth.verifyDrugByBatchId(drugData.batchId);\n      expect(drug.batchId).to.equal(drugData.batchId);\n      expect(drug.drugName).to.equal(drugData.drugName);\n    });\n\n    it(\"Should fail for non-existent token\", async function () {\n      await expect(drugAuth.verifyDrug(999)).to.be.revertedWith(\"Drug does not exist\");\n    });\n\n    it(\"Should fail for non-existent batch ID\", async function () {\n      await expect(drugAuth.verifyDrugByBatchId(\"INVALID-BATCH\")).to.be.revertedWith(\n        \"Batch ID does not exist\"\n      );\n    });\n  });\n\n  describe(\"Drug History\", function () {\n    let tokenId;\n\n    beforeEach(async function () {\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n      tokenId = 1;\n    });\n\n    it(\"Should track manufacturing event\", async function () {\n      const history = await drugAuth.getDrugHistory(tokenId);\n      expect(history.length).to.equal(1);\n      expect(history[0].from).to.equal(ethers.ZeroAddress);\n      expect(history[0].to).to.equal(owner.address);\n      expect(history[0].eventType).to.equal(\"manufacture\");\n    });\n\n    it(\"Should track multiple transfers\", async function () {\n      await drugAuth.transferOwnership(tokenId, manufacturer.address, \"transfer\");\n      await drugAuth.connect(manufacturer).transferOwnership(tokenId, distributor.address, \"distribute\");\n\n      const history = await drugAuth.getDrugHistory(tokenId);\n      expect(history.length).to.equal(3);\n      expect(history[2].eventType).to.equal(\"distribute\");\n    });\n  });\n\n  describe(\"Role Management\", function () {\n    it(\"Should assign roles correctly\", async function () {\n      await drugAuth.assignRole(manufacturer.address, \"manufacturer\");\n      const role = await drugAuth.getUserRole(manufacturer.address);\n      expect(role).to.equal(\"manufacturer\");\n    });\n\n    it(\"Should emit RoleAssigned event\", async function () {\n      await expect(drugAuth.assignRole(manufacturer.address, \"manufacturer\"))\n        .to.emit(drugAuth, \"RoleAssigned\")\n        .withArgs(manufacturer.address, \"manufacturer\");\n    });\n\n    it(\"Should fail when non-owner assigns roles\", async function () {\n      await expect(\n        drugAuth.connect(manufacturer).assignRole(distributor.address, \"distributor\")\n      ).to.be.revertedWith(\"Ownable: caller is not the owner\");\n    });\n  });\n\n  describe(\"Utility Functions\", function () {\n    it(\"Should return total drugs count\", async function () {\n      expect(await drugAuth.totalDrugs()).to.equal(0);\n\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n\n      expect(await drugAuth.totalDrugs()).to.equal(1);\n    });\n\n    it(\"Should return drugs by owner\", async function () {\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n\n      const drugs = await drugAuth.getDrugsByOwner(owner.address);\n      expect(drugs.length).to.equal(1);\n      expect(drugs[0]).to.equal(1);\n    });\n\n    it(\"Should deactivate drug\", async function () {\n      await drugAuth.registerDrug(\n        drugData.batchId,\n        drugData.drugName,\n        drugData.manufacturer,\n        drugData.expiryDate,\n        drugData.ipfsHash\n      );\n\n      await drugAuth.deactivateDrug(1);\n      const drug = await drugAuth.verifyDrug(1);\n      expect(drug.isActive).to.be.false;\n    });\n  });\n});\n","size_bytes":9505},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport Dashboard from \"@/pages/dashboard\";\nimport RegisterDrug from \"@/pages/register-drug\";\nimport VerifyDrug from \"@/pages/verify-drug\";\nimport TrackSupplyChain from \"@/pages/track-supply-chain\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen bg-background flex flex-col\">\n      <Header />\n      <main className=\"flex-1\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/register\" component={RegisterDrug} />\n          <Route path=\"/verify\" component={VerifyDrug} />\n          <Route path=\"/track\" component={TrackSupplyChain} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n      <Footer />\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1388},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0 0% 98.0392%);\n  --foreground: hsl(210 25% 7.8431%);\n  --card: hsl(0 0% 100%);\n  --card-foreground: hsl(210 25% 7.8431%);\n  --popover: hsl(0 0% 100%);\n  --popover-foreground: hsl(210 25% 7.8431%);\n  --primary: hsl(206.5217 78.5714% 45.2941%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(120.8571 46.6667% 22.5490%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(240 1.9608% 90%);\n  --muted-foreground: hsl(210 25% 7.8431%);\n  --accent: hsl(35.6522 100% 48.0392%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(201.4286 30.4348% 90.9804%);\n  --input: hsl(200 23.0769% 97.4510%);\n  --ring: hsl(206.5217 78.5714% 45.2941%);\n  --neutral: hsl(210 11.1111% 15.2941%);\n  --surface: hsl(0 0% 100%);\n  --chart-1: hsl(206.5217 78.5714% 45.2941%);\n  --chart-2: hsl(120.8571 46.6667% 22.5490%);\n  --chart-3: hsl(35.6522 100% 48.0392%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(0 0% 100%);\n  --sidebar-foreground: hsl(210 25% 7.8431%);\n  --sidebar-primary: hsl(206.5217 78.5714% 45.2941%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(211.5789 51.3514% 92.7451%);\n  --sidebar-accent-foreground: hsl(206.5217 78.5714% 45.2941%);\n  --sidebar-border: hsl(205.0000 25.0000% 90.5882%);\n  --sidebar-ring: hsl(206.5217 78.5714% 45.2941%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'Monaco', 'Menlo', monospace;\n  --radius: 0.75rem;\n}\n\n.dark {\n  --background: hsl(0 0% 0%);\n  --foreground: hsl(200 6.6667% 91.1765%);\n  --card: hsl(228 9.8039% 10%);\n  --card-foreground: hsl(0 0% 85.0980%);\n  --popover: hsl(0 0% 0%);\n  --popover-foreground: hsl(200 6.6667% 91.1765%);\n  --primary: hsl(206.5217 78.5714% 45.2941%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(120.8571 46.6667% 22.5490%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(0 0% 9.4118%);\n  --muted-foreground: hsl(210 3.3898% 46.2745%);\n  --accent: hsl(35.6522 100% 48.0392%);\n  --accent-foreground: hsl(0 0% 100%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(210 5.2632% 14.9020%);\n  --input: hsl(207.6923 27.6596% 18.4314%);\n  --ring: hsl(206.5217 78.5714% 45.2941%);\n  --neutral: hsl(210 11.1111% 15.2941%);\n  --surface: hsl(228 9.8039% 10%);\n  --chart-1: hsl(206.5217 78.5714% 45.2941%);\n  --chart-2: hsl(120.8571 46.6667% 22.5490%);\n  --chart-3: hsl(35.6522 100% 48.0392%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(228 9.8039% 10%);\n  --sidebar-foreground: hsl(0 0% 85.0980%);\n  --sidebar-primary: hsl(206.5217 78.5714% 45.2941%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(205.7143 70% 7.8431%);\n  --sidebar-accent-foreground: hsl(206.5217 78.5714% 45.2941%);\n  --sidebar-border: hsl(205.7143 15.7895% 26.0784%);\n  --sidebar-ring: hsl(206.5217 78.5714% 45.2941%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: var(--font-sans);\n  }\n\n  .bg-primary {\n    background-color: var(--primary);\n  }\n\n  .bg-secondary {\n    background-color: var(--secondary);\n  }\n\n  .bg-accent {\n    background-color: var(--accent);\n  }\n\n  .bg-neutral {\n    background-color: var(--neutral);\n  }\n\n  .bg-surface {\n    background-color: var(--surface);\n  }\n\n  .text-primary {\n    color: var(--primary);\n  }\n\n  .text-secondary {\n    color: var(--secondary);\n  }\n\n  .text-accent {\n    color: var(--accent);\n  }\n\n  .text-neutral {\n    color: var(--neutral);\n  }\n\n  .border-primary {\n    border-color: var(--primary);\n  }\n}\n","size_bytes":3979},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/drug-details-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useIPFS } from \"@/hooks/use-ipfs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { downloadQRCode, createDrugQRData, generateQRCode } from \"@/utils/qr-code\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface DrugBatch {\n  id: string;\n  batchId: string;\n  drugName: string;\n  manufacturer: string;\n  manufacturingDate: string;\n  expiryDate: string;\n  currentOwner: string;\n  currentOwnerAddress: string;\n  status: string;\n  ipfsHash?: string;\n  contractAddress?: string;\n  tokenId?: string;\n  createdAt: string;\n}\n\ninterface SupplyChainEvent {\n  id: string;\n  fromOwner?: string;\n  toOwner: string;\n  fromOwnerAddress?: string;\n  toOwnerAddress: string;\n  eventType: string;\n  transactionHash?: string;\n  timestamp: string;\n}\n\ninterface DrugDetailsModalProps {\n  drug: DrugBatch;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function DrugDetailsModal({ drug, isOpen, onClose }: DrugDetailsModalProps) {\n  const { retrieveFile } = useIPFS();\n  const { toast } = useToast();\n  const [qrCode, setQrCode] = useState<string>(\"\");\n  const [certificateUrl, setCertificateUrl] = useState<string | null>(null);\n\n  // Fetch supply chain history for this drug\n  const { data: supplyChainEvents, isLoading: eventsLoading } = useQuery<SupplyChainEvent[]>({\n    queryKey: [\"/api/drug-batches/history\", drug.batchId],\n    enabled: isOpen && !!drug.batchId,\n  });\n\n  // Generate QR code when modal opens\n  useEffect(() => {\n    if (isOpen && drug) {\n      const generateQR = async () => {\n        try {\n          const qrData = createDrugQRData(drug.batchId, drug.tokenId);\n          const qrDataUrl = await generateQRCode(qrData);\n          setQrCode(qrDataUrl);\n        } catch (error) {\n          console.error(\"Failed to generate QR code:\", error);\n        }\n      };\n\n      generateQR();\n\n      // Retrieve certificate from IPFS if available\n      if (drug.ipfsHash) {\n        retrieveFile(drug.ipfsHash)\n          .then((url) => setCertificateUrl(url))\n          .catch((error) => console.error(\"Failed to retrieve certificate:\", error));\n      }\n    }\n  }, [isOpen, drug, retrieveFile]);\n\n  const handleDownloadQR = async () => {\n    try {\n      await downloadQRCode(createDrugQRData(drug.batchId, drug.tokenId), `DrugAuth-${drug.batchId}`);\n      toast({\n        title: \"QR Code Downloaded\",\n        description: `QR code for batch ${drug.batchId} has been downloaded`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Download Failed\",\n        description: \"Failed to download QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"delivered\":\n        return \"default\";\n      case \"in_transit\":\n        return \"secondary\";\n      case \"manufactured\":\n        return \"outline\";\n      case \"expired\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.replace(\"_\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  const getEventIcon = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"manufacture\":\n        return \"fas fa-industry\";\n      case \"transfer\":\n        return \"fas fa-truck\";\n      case \"distribute\":\n        return \"fas fa-warehouse\";\n      case \"deliver\":\n        return \"fas fa-store\";\n      case \"verify\":\n        return \"fas fa-shield-check\";\n      default:\n        return \"fas fa-arrow-right\";\n    }\n  };\n\n  const getEventColor = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"manufacture\":\n        return \"bg-green-500\";\n      case \"transfer\":\n        return \"bg-amber-500\";\n      case \"distribute\":\n        return \"bg-blue-500\";\n      case \"deliver\":\n        return \"bg-purple-500\";\n      case \"verify\":\n        return \"bg-secondary\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-screen overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>Drug Batch Details</DialogTitle>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <i className=\"fas fa-times text-xl\"></i>\n            </Button>\n          </div>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Drug Information */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-neutral mb-4\">Drug Information</h3>\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-600 mb-1\">Batch ID</label>\n                <p className=\"font-mono text-neutral bg-gray-50 px-3 py-2 rounded-md\">\n                  {drug.batchId}\n                </p>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-600 mb-1\">Drug Name</label>\n                <p className=\"text-neutral font-medium\">{drug.drugName}</p>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-600 mb-1\">Manufacturer</label>\n                <p className=\"text-neutral\">{drug.manufacturer}</p>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-600 mb-1\">Manufacturing Date</label>\n                  <p className=\"text-neutral\">\n                    {new Date(drug.manufacturingDate).toLocaleDateString()}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-600 mb-1\">Expiry Date</label>\n                  <p className=\"text-neutral\">\n                    {new Date(drug.expiryDate).toLocaleDateString()}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-600 mb-1\">Current Status</label>\n                <Badge variant={getStatusBadgeVariant(drug.status)}>\n                  {formatStatus(drug.status)}\n                </Badge>\n              </div>\n\n              <div>\n                <label className=\"block text-sm font-medium text-gray-600 mb-1\">Current Owner</label>\n                <p className=\"text-neutral\">{drug.currentOwner}</p>\n                <p className=\"text-xs text-gray-500 font-mono break-all mt-1\">\n                  {drug.currentOwnerAddress}\n                </p>\n              </div>\n            </div>\n\n            {/* QR Code */}\n            <div className=\"mt-6 p-4 border border-gray-200 rounded-lg text-center\">\n              <h4 className=\"font-medium text-neutral mb-3\">QR Code</h4>\n              <div className=\"w-32 h-32 mx-auto flex items-center justify-center bg-white border rounded-lg\">\n                {qrCode ? (\n                  <img src={qrCode} alt=\"QR Code\" className=\"w-full h-full\" />\n                ) : (\n                  <i className=\"fas fa-qrcode text-4xl text-gray-400\"></i>\n                )}\n              </div>\n              <Button\n                onClick={handleDownloadQR}\n                variant=\"outline\"\n                size=\"sm\"\n                className=\"mt-3\"\n              >\n                <i className=\"fas fa-download mr-2\"></i>\n                Download QR Code\n              </Button>\n            </div>\n          </div>\n\n          {/* Supply Chain History */}\n          <div>\n            <h3 className=\"text-lg font-semibold text-neutral mb-4\">Supply Chain History</h3>\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\n              {eventsLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"border border-gray-200 rounded-lg p-4\">\n                      <Skeleton className=\"h-4 w-full mb-2\" />\n                      <Skeleton className=\"h-3 w-3/4 mb-2\" />\n                      <Skeleton className=\"h-3 w-1/2\" />\n                    </div>\n                  ))}\n                </div>\n              ) : supplyChainEvents && supplyChainEvents.length > 0 ? (\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200\"></div>\n                  <div className=\"space-y-4\">\n                    {supplyChainEvents.map((event, index) => (\n                      <div key={event.id} className=\"relative flex items-start space-x-4\">\n                        <div className={`w-8 h-8 ${getEventColor(event.eventType)} rounded-full flex items-center justify-center relative z-10`}>\n                          <i className={`${getEventIcon(event.eventType)} text-white text-xs`}></i>\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <div className=\"flex items-center justify-between mb-1\">\n                            <p className=\"font-medium text-neutral capitalize\">\n                              {event.eventType.replace(\"_\", \" \")}\n                            </p>\n                            <span className=\"text-sm text-gray-600\">\n                              {new Date(event.timestamp).toLocaleDateString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-600\">\n                            {event.fromOwner ? (\n                              <p>{event.fromOwner} → {event.toOwner}</p>\n                            ) : (\n                              <p>{event.toOwner}</p>\n                            )}\n                          </div>\n                          {event.transactionHash && (\n                            <div className=\"mt-1\">\n                              <a\n                                href={`https://goerli.etherscan.io/tx/${event.transactionHash}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"text-xs text-primary hover:text-primary/80\"\n                              >\n                                Tx: {event.transactionHash.slice(0, 10)}...{event.transactionHash.slice(-8)}\n                              </a>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-history text-4xl text-gray-300 mb-4\"></i>\n                  <p className=\"text-gray-500\">No supply chain history available</p>\n                </div>\n              )}\n            </div>\n\n            {/* IPFS Certificate Link */}\n            {certificateUrl && (\n              <div className=\"mt-6 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-2\">Certificate & Documents</h4>\n                <div className=\"flex items-center space-x-2\">\n                  <i className=\"fas fa-file-alt text-blue-600\"></i>\n                  <a\n                    href={certificateUrl}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                  >\n                    View Certificate (IPFS)\n                  </a>\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":12062},"client/src/components/drug-registration-form.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { useIPFS } from \"@/hooks/use-ipfs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst drugRegistrationSchema = z.object({\n  drugName: z.string().min(1, \"Drug name is required\"),\n  batchId: z.string().min(1, \"Batch ID is required\"),\n  manufacturer: z.string().min(1, \"Manufacturer is required\"),\n  manufacturingDate: z.string().min(1, \"Manufacturing date is required\"),\n  expiryDate: z.string().min(1, \"Expiry date is required\"),\n  certificate: z.instanceof(FileList).optional(),\n});\n\ntype DrugRegistrationData = z.infer<typeof drugRegistrationSchema>;\n\nexport function DrugRegistrationForm() {\n  const { contract, account, isConnected } = useBlockchain();\n  const { uploadFile, isUploading } = useIPFS();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isRegistering, setIsRegistering] = useState(false);\n\n  const form = useForm<DrugRegistrationData>({\n    resolver: zodResolver(drugRegistrationSchema),\n    defaultValues: {\n      drugName: \"\",\n      batchId: \"\",\n      manufacturer: \"\",\n      manufacturingDate: \"\",\n      expiryDate: \"\",\n    },\n  });\n\n  const registerDrugMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await apiRequest(\"POST\", \"/api/drug-batches\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/drug-batches\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/stats\"] });\n      toast({\n        title: \"Drug Registered\",\n        description: \"Drug batch has been successfully registered on the blockchain\",\n      });\n      form.reset();\n    },\n    onError: (error) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error instanceof Error ? error.message : \"Failed to register drug\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: DrugRegistrationData) => {\n    if (!isConnected || !contract || !account) {\n      toast({\n        title: \"Wallet Not Connected\",\n        description: \"Please connect your wallet to register a drug\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setIsRegistering(true);\n\n    try {\n      let ipfsHash = \"\";\n\n      // Upload certificate to IPFS if provided\n      if (data.certificate && data.certificate.length > 0) {\n        const certificateFile = data.certificate[0];\n        const hash = await uploadFile(certificateFile);\n        if (hash) {\n          ipfsHash = hash;\n        }\n      }\n\n      // Convert dates to timestamps\n      const manufacturingTimestamp = new Date(data.manufacturingDate).getTime() / 1000;\n      const expiryTimestamp = new Date(data.expiryDate).getTime() / 1000;\n\n      // Register on smart contract\n      const tx = await contract.registerDrug(\n        data.batchId,\n        data.drugName,\n        data.manufacturer,\n        expiryTimestamp,\n        ipfsHash\n      );\n\n      const receipt = await tx.wait();\n      const tokenId = receipt.logs[0]?.args?.tokenId;\n\n      // Save to database\n      await registerDrugMutation.mutateAsync({\n        batchId: data.batchId,\n        drugName: data.drugName,\n        manufacturer: data.manufacturer,\n        manufacturingDate: data.manufacturingDate,\n        expiryDate: data.expiryDate,\n        currentOwner: data.manufacturer,\n        currentOwnerAddress: account,\n        status: \"manufactured\",\n        ipfsHash,\n        contractAddress: contract.target,\n        tokenId: tokenId?.toString(),\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      toast({\n        title: \"Registration Failed\",\n        description: error instanceof Error ? error.message : \"Failed to register drug on blockchain\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsRegistering(false);\n    }\n  };\n\n  const isLoading = isRegistering || isUploading || registerDrugMutation.isPending;\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <i className=\"fas fa-plus-circle text-primary\"></i>\n          <span>Quick Register Drug</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"drugName\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Drug Name</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., Aspirin 100mg\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"batchId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Batch ID</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., BTC-2024-004\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"manufacturer\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Manufacturer</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"e.g., PharmaCorp Ltd.\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"manufacturingDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Manufacturing Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"expiryDate\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Expiry Date</FormLabel>\n                    <FormControl>\n                      <Input type=\"date\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"certificate\"\n              render={({ field: { onChange, value, ...rest } }) => (\n                <FormItem>\n                  <FormLabel>Certificate Upload</FormLabel>\n                  <FormControl>\n                    <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-4 text-center hover:border-primary/50 transition-colors\">\n                      <input\n                        type=\"file\"\n                        accept=\".pdf,.png,.jpg,.jpeg\"\n                        onChange={(e) => onChange(e.target.files)}\n                        className=\"hidden\"\n                        id=\"certificate-upload\"\n                        {...rest}\n                      />\n                      <label\n                        htmlFor=\"certificate-upload\"\n                        className=\"cursor-pointer block\"\n                      >\n                        <i className=\"fas fa-cloud-upload-alt text-2xl text-gray-400 mb-2\"></i>\n                        <p className=\"text-sm text-gray-600\">\n                          Click to upload or drag and drop\n                        </p>\n                        <p className=\"text-xs text-gray-400\">\n                          PDF, PNG, JPG up to 10MB\n                        </p>\n                      </label>\n                    </div>\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              disabled={!isConnected || isLoading}\n              className=\"w-full bg-primary text-white hover:bg-primary/90\"\n            >\n              {isLoading ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  {isUploading ? \"Uploading...\" : \"Registering...\"}\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-plus mr-2\"></i>\n                  Register Drug\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":9351},"client/src/components/drug-verification.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst verificationSchema = z.object({\n  batchId: z.string().min(1, \"Batch ID is required\"),\n});\n\ntype VerificationData = z.infer<typeof verificationSchema>;\n\ninterface VerificationResult {\n  isValid: boolean;\n  drug?: {\n    batchId: string;\n    drugName: string;\n    manufacturer: string;\n    status: string;\n    expiryDate: string;\n  };\n  message: string;\n}\n\nexport function DrugVerification() {\n  const { toast } = useToast();\n  const [verificationResult, setVerificationResult] = useState<VerificationResult | null>(null);\n\n  const form = useForm<VerificationData>({\n    resolver: zodResolver(verificationSchema),\n    defaultValues: {\n      batchId: \"\",\n    },\n  });\n\n  const verifyDrugMutation = useMutation({\n    mutationFn: async (batchId: string) => {\n      const response = await apiRequest(\"GET\", `/api/drug-batches/verify/${encodeURIComponent(batchId)}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setVerificationResult({\n        isValid: true,\n        drug: data.drug,\n        message: \"Drug verified successfully\",\n      });\n      toast({\n        title: \"Drug Verified ✓\",\n        description: \"This drug is authentic and traceable in our system.\",\n      });\n    },\n    onError: (error) => {\n      setVerificationResult({\n        isValid: false,\n        message: error instanceof Error ? error.message : \"Drug verification failed\",\n      });\n      toast({\n        title: \"Verification Failed\",\n        description: \"Drug batch not found or invalid\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = async (data: VerificationData) => {\n    setVerificationResult(null);\n    verifyDrugMutation.mutate(data.batchId);\n  };\n\n  const handleScanQR = () => {\n    toast({\n      title: \"QR Scanner\",\n      description: \"QR code scanning would require camera permissions in a production app\",\n    });\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <i className=\"fas fa-search text-secondary\"></i>\n          <span>Verify Drug</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"batchId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Batch ID or QR Code</FormLabel>\n                  <div className=\"flex space-x-2\">\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter batch ID\"\n                        {...field}\n                        className=\"flex-1\"\n                      />\n                    </FormControl>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={handleScanQR}\n                      className=\"px-3\"\n                      title=\"Scan QR Code\"\n                    >\n                      <i className=\"fas fa-qrcode\"></i>\n                    </Button>\n                  </div>\n                </FormItem>\n              )}\n            />\n\n            <Button\n              type=\"submit\"\n              disabled={verifyDrugMutation.isPending}\n              className=\"w-full bg-secondary text-white hover:bg-secondary/90\"\n            >\n              {verifyDrugMutation.isPending ? (\n                <>\n                  <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                  Verifying...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-shield-check mr-2\"></i>\n                  Verify Drug\n                </>\n              )}\n            </Button>\n          </form>\n        </Form>\n\n        {/* Verification Result */}\n        {verificationResult && (\n          <Alert className={verificationResult.isValid ? \"border-green-200 bg-green-50\" : \"border-red-200 bg-red-50\"}>\n            <div className=\"flex items-start space-x-3\">\n              <i className={`${verificationResult.isValid ? \"fas fa-check-circle text-green-600\" : \"fas fa-exclamation-triangle text-red-600\"} mt-0.5`}></i>\n              <div className=\"flex-1\">\n                <AlertDescription>\n                  <p className={`font-medium ${verificationResult.isValid ? \"text-green-800\" : \"text-red-800\"}`}>\n                    {verificationResult.isValid ? \"Drug Verified ✓\" : \"Verification Failed ✗\"}\n                  </p>\n                  {verificationResult.isValid && verificationResult.drug && (\n                    <div className=\"mt-2 space-y-1 text-sm\">\n                      <p className=\"text-green-700\">\n                        <strong>Drug:</strong> {verificationResult.drug.drugName}\n                      </p>\n                      <p className=\"text-green-700\">\n                        <strong>Manufacturer:</strong> {verificationResult.drug.manufacturer}\n                      </p>\n                      <p className=\"text-green-700\">\n                        <strong>Status:</strong> {verificationResult.drug.status.replace(\"_\", \" \").toUpperCase()}\n                      </p>\n                    </div>\n                  )}\n                  <p className={`text-sm mt-1 ${verificationResult.isValid ? \"text-green-700\" : \"text-red-700\"}`}>\n                    {verificationResult.message}\n                  </p>\n                </AlertDescription>\n              </div>\n            </div>\n          </Alert>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6226},"client/src/components/supply-chain-timeline.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n\nconst mockTimelineData = [\n  {\n    stage: \"Manufacturing\",\n    status: \"completed\",\n    icon: \"fas fa-industry\",\n    color: \"bg-green-500\",\n    description: \"Completed\",\n  },\n  {\n    stage: \"Production\",\n    status: \"completed\", \n    icon: \"fas fa-cogs\",\n    color: \"bg-green-500\",\n    description: \"Completed\",\n  },\n  {\n    stage: \"Distribution\",\n    status: \"in_progress\",\n    icon: \"fas fa-truck\",\n    color: \"bg-amber-500\",\n    description: \"In Progress\",\n  },\n  {\n    stage: \"Pharmacy\",\n    status: \"pending\",\n    icon: \"fas fa-store\",\n    color: \"bg-gray-300\",\n    description: \"Pending\",\n  },\n  {\n    stage: \"Customer\",\n    status: \"pending\",\n    icon: \"fas fa-user\",\n    color: \"bg-gray-300\",\n    description: \"Pending\",\n  },\n];\n\nexport function SupplyChainTimeline() {\n  const getTextColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"text-neutral\";\n      case \"in_progress\":\n        return \"text-amber-600\";\n      case \"pending\":\n        return \"text-gray-600\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  const getDescriptionColor = (status: string) => {\n    switch (status) {\n      case \"completed\":\n        return \"text-gray-600\";\n      case \"in_progress\":\n        return \"text-amber-600\";\n      case \"pending\":\n        return \"text-gray-500\";\n      default:\n        return \"text-gray-500\";\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center space-x-2\">\n          <i className=\"fas fa-route text-accent\"></i>\n          <span>Supply Chain Status</span>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          <div className=\"relative\">\n            <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200\"></div>\n            \n            {mockTimelineData.map((item, index) => (\n              <div key={item.stage} className=\"relative flex items-center space-x-4 pb-4 last:pb-0\">\n                <div className={`w-8 h-8 ${item.color} rounded-full flex items-center justify-center relative z-10`}>\n                  <i className={`${item.icon} text-white text-xs`}></i>\n                </div>\n                <div>\n                  <p className={`font-medium ${getTextColor(item.status)}`}>\n                    {item.stage}\n                  </p>\n                  <p className={`text-sm ${getDescriptionColor(item.status)}`}>\n                    {item.description}\n                  </p>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n\n        <div className=\"mt-6 p-3 bg-blue-50 border border-blue-200 rounded-lg\">\n          <p className=\"text-sm text-blue-800\">\n            <i className=\"fas fa-info-circle mr-2\"></i>\n            This shows a sample supply chain status. Track a specific drug batch to see real-time updates.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3005},"client/src/components/wallet-connection.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function WalletConnection() {\n  const { account, isConnected, connectWallet, disconnectWallet } = useBlockchain();\n  const { toast } = useToast();\n  const [isConnecting, setIsConnecting] = useState(false);\n\n  const handleConnect = async () => {\n    setIsConnecting(true);\n    try {\n      await connectWallet();\n      toast({\n        title: \"Wallet Connected\",\n        description: \"Successfully connected to MetaMask\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Connection Failed\",\n        description: error instanceof Error ? error.message : \"Failed to connect wallet\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  const handleDisconnect = () => {\n    disconnectWallet();\n    toast({\n      title: \"Wallet Disconnected\",\n      description: \"Successfully disconnected from MetaMask\",\n    });\n  };\n\n  const formatAddress = (address: string) => {\n    return `${address.slice(0, 6)}...${address.slice(-4)}`;\n  };\n\n  if (isConnected && account) {\n    return (\n      <div className=\"flex items-center space-x-2\">\n        <div className=\"hidden sm:flex items-center space-x-2 px-3 py-1.5 bg-green-50 rounded-lg border border-green-200\">\n          <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n          <span className=\"text-sm text-green-700 font-medium\">\n            {formatAddress(account)}\n          </span>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={handleDisconnect}\n          className=\"text-xs\"\n        >\n          Disconnect\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Button\n      onClick={handleConnect}\n      disabled={isConnecting}\n      className=\"bg-primary text-white hover:bg-primary/90\"\n      size=\"sm\"\n    >\n      {isConnecting ? (\n        <>\n          <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n          Connecting...\n        </>\n      ) : (\n        <>\n          <i className=\"fas fa-wallet mr-2\"></i>\n          Connect Wallet\n        </>\n      )}\n    </Button>\n  );\n}\n","size_bytes":2240},"client/src/hooks/use-blockchain.tsx":{"content":"import { useState, useEffect, createContext, useContext, ReactNode } from \"react\";\nimport { ethers } from \"ethers\";\nimport { contractABI, contractAddress } from \"@/utils/ethereum\";\n\ninterface BlockchainContextType {\n  provider: ethers.BrowserProvider | null;\n  signer: ethers.Signer | null;\n  contract: ethers.Contract | null;\n  account: string | null;\n  isConnected: boolean;\n  userRole: string | null;\n  connectWallet: () => Promise<void>;\n  disconnectWallet: () => void;\n  switchToGoerli: () => Promise<void>;\n}\n\nconst BlockchainContext = createContext<BlockchainContextType>({\n  provider: null,\n  signer: null,\n  contract: null,\n  account: null,\n  isConnected: false,\n  userRole: null,\n  connectWallet: async () => {},\n  disconnectWallet: () => {},\n  switchToGoerli: async () => {},\n});\n\ninterface BlockchainProviderProps {\n  children: ReactNode;\n}\n\nexport function BlockchainProvider({ children }: BlockchainProviderProps) {\n  const [provider, setProvider] = useState<ethers.BrowserProvider | null>(null);\n  const [signer, setSigner] = useState<ethers.Signer | null>(null);\n  const [contract, setContract] = useState<ethers.Contract | null>(null);\n  const [account, setAccount] = useState<string | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [userRole, setUserRole] = useState<string | null>(null);\n\n  const connectWallet = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        const provider = new ethers.BrowserProvider(window.ethereum);\n        const accounts = await provider.send(\"eth_requestAccounts\", []);\n        const signer = await provider.getSigner();\n        const address = await signer.getAddress();\n\n        // Check if on Goerli network\n        const network = await provider.getNetwork();\n        if (network.chainId !== 5n) {\n          await switchToGoerli();\n        }\n\n        const contract = new ethers.Contract(contractAddress, contractABI, signer);\n\n        setProvider(provider);\n        setSigner(signer);\n        setContract(contract);\n        setAccount(address);\n        setIsConnected(true);\n\n        // Try to get user role from contract or localStorage\n        const storedRole = localStorage.getItem(`userRole_${address}`);\n        setUserRole(storedRole || \"customer\");\n\n        // Listen for account changes\n        window.ethereum.on(\"accountsChanged\", (accounts: string[]) => {\n          if (accounts.length === 0) {\n            disconnectWallet();\n          } else {\n            setAccount(accounts[0]);\n          }\n        });\n\n        // Listen for network changes\n        window.ethereum.on(\"chainChanged\", () => {\n          window.location.reload();\n        });\n      } catch (error) {\n        console.error(\"Error connecting wallet:\", error);\n        throw error;\n      }\n    } else {\n      throw new Error(\"MetaMask is not installed\");\n    }\n  };\n\n  const disconnectWallet = () => {\n    setProvider(null);\n    setSigner(null);\n    setContract(null);\n    setAccount(null);\n    setIsConnected(false);\n    setUserRole(null);\n  };\n\n  const switchToGoerli = async () => {\n    if (typeof window.ethereum !== \"undefined\") {\n      try {\n        await window.ethereum.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: \"0x5\" }],\n        });\n      } catch (switchError: any) {\n        if (switchError.code === 4902) {\n          await window.ethereum.request({\n            method: \"wallet_addEthereumChain\",\n            params: [\n              {\n                chainId: \"0x5\",\n                chainName: \"Goerli Testnet\",\n                nativeCurrency: {\n                  name: \"ETH\",\n                  symbol: \"ETH\",\n                  decimals: 18,\n                },\n                rpcUrls: [\"https://goerli.infura.io/v3/\"],\n                blockExplorerUrls: [\"https://goerli.etherscan.io\"],\n              },\n            ],\n          });\n        }\n        throw switchError;\n      }\n    }\n  };\n\n  // Auto-connect if previously connected\n  useEffect(() => {\n    const savedAccount = localStorage.getItem(\"connectedAccount\");\n    if (savedAccount && typeof window.ethereum !== \"undefined\") {\n      connectWallet().catch(console.error);\n    }\n  }, []);\n\n  // Save connected account\n  useEffect(() => {\n    if (account) {\n      localStorage.setItem(\"connectedAccount\", account);\n    } else {\n      localStorage.removeItem(\"connectedAccount\");\n    }\n  }, [account]);\n\n  const value = {\n    provider,\n    signer,\n    contract,\n    account,\n    isConnected,\n    userRole,\n    connectWallet,\n    disconnectWallet,\n    switchToGoerli,\n  };\n\n  return (\n    <BlockchainContext.Provider value={value}>\n      {children}\n    </BlockchainContext.Provider>\n  );\n}\n\nexport function useBlockchain() {\n  const context = useContext(BlockchainContext);\n  if (!context) {\n    throw new Error(\"useBlockchain must be used within a BlockchainProvider\");\n  }\n  return context;\n}\n\n// HOC to wrap the App component\nexport function withBlockchain(Component: React.ComponentType) {\n  return function BlockchainWrappedComponent(props: any) {\n    return (\n      <BlockchainProvider>\n        <Component {...props} />\n      </BlockchainProvider>\n    );\n  };\n}\n","size_bytes":5173},"client/src/hooks/use-ipfs.tsx":{"content":"import { useState } from \"react\";\nimport { uploadToIPFS, retrieveFromIPFS } from \"@/utils/ipfs\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface UseIPFSReturn {\n  uploadFile: (file: File) => Promise<string | null>;\n  retrieveFile: (hash: string) => Promise<string | null>;\n  isUploading: boolean;\n  isRetrieving: boolean;\n}\n\nexport function useIPFS(): UseIPFSReturn {\n  const [isUploading, setIsUploading] = useState(false);\n  const [isRetrieving, setIsRetrieving] = useState(false);\n  const { toast } = useToast();\n\n  const uploadFile = async (file: File): Promise<string | null> => {\n    setIsUploading(true);\n    try {\n      const hash = await uploadToIPFS(file);\n      toast({\n        title: \"File Uploaded\",\n        description: `File uploaded to IPFS: ${hash}`,\n      });\n      return hash;\n    } catch (error) {\n      toast({\n        title: \"Upload Failed\",\n        description: error instanceof Error ? error.message : \"Failed to upload file to IPFS\",\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsUploading(false);\n    }\n  };\n\n  const retrieveFile = async (hash: string): Promise<string | null> => {\n    setIsRetrieving(true);\n    try {\n      const url = await retrieveFromIPFS(hash);\n      return url;\n    } catch (error) {\n      toast({\n        title: \"Retrieval Failed\",\n        description: error instanceof Error ? error.message : \"Failed to retrieve file from IPFS\",\n        variant: \"destructive\",\n      });\n      return null;\n    } finally {\n      setIsRetrieving(false);\n    }\n  };\n\n  return {\n    uploadFile,\n    retrieveFile,\n    isUploading,\n    isRetrieving,\n  };\n}\n","size_bytes":1639},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Link } from \"wouter\";\nimport { DrugDetailsModal } from \"@/components/drug-details-modal\";\nimport { DrugRegistrationForm } from \"@/components/drug-registration-form\";\nimport { DrugVerification } from \"@/components/drug-verification\";\nimport { SupplyChainTimeline } from \"@/components/supply-chain-timeline\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { downloadQRCode, createDrugQRData } from \"@/utils/qr-code\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DrugBatch {\n  id: string;\n  batchId: string;\n  drugName: string;\n  manufacturer: string;\n  currentOwner: string;\n  status: string;\n  expiryDate: string;\n  createdAt: string;\n}\n\ninterface DashboardStats {\n  totalBatches: number;\n  activeTransfers: number;\n  verifiedDrugs: number;\n  gasUsed: string;\n}\n\nexport default function Dashboard() {\n  const { isConnected, account } = useBlockchain();\n  const { toast } = useToast();\n  const [selectedDrug, setSelectedDrug] = useState<DrugBatch | null>(null);\n  const [currentPage, setCurrentPage] = useState(1);\n\n  // Fetch dashboard stats\n  const { data: stats, isLoading: statsLoading } = useQuery<DashboardStats>({\n    queryKey: [\"/api/dashboard/stats\"],\n    enabled: isConnected && !!account,\n  });\n\n  // Fetch recent drug batches\n  const { data: recentBatches, isLoading: batchesLoading } = useQuery<DrugBatch[]>({\n    queryKey: [\"/api/drug-batches\", currentPage],\n    enabled: isConnected && !!account,\n  });\n\n  const handleGenerateQR = async (batch: DrugBatch) => {\n    try {\n      const qrData = createDrugQRData(batch.batchId);\n      await downloadQRCode(qrData, `DrugAuth-${batch.batchId}`);\n      toast({\n        title: \"QR Code Generated\",\n        description: `QR code for batch ${batch.batchId} has been downloaded`,\n      });\n    } catch (error) {\n      toast({\n        title: \"QR Generation Failed\",\n        description: \"Failed to generate QR code\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"delivered\":\n        return \"default\";\n      case \"in_transit\":\n        return \"secondary\";\n      case \"pending\":\n        return \"outline\";\n      case \"expired\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.replace(\"_\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  if (!isConnected || !account) {\n    return (\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-wallet text-primary text-2xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Connect Your Wallet</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Please connect your MetaMask wallet to access the DrugAuth dashboard\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between mb-6\">\n          <div>\n            <h2 className=\"text-2xl font-bold text-neutral mb-2\">\n              Pharmaceutical Supply Chain Dashboard\n            </h2>\n            <p className=\"text-gray-600\">\n              Track and verify drug batches across the entire supply chain\n            </p>\n          </div>\n          <div className=\"mt-4 lg:mt-0\">\n            <Link href=\"/register\">\n              <Button className=\"bg-primary text-white hover:bg-primary/90 flex items-center space-x-2\">\n                <i className=\"fas fa-plus\"></i>\n                <span>Register New Drug</span>\n              </Button>\n            </Link>\n          </div>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Total Batches</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <p className=\"text-2xl font-bold text-neutral\">\n                      {stats?.totalBatches || 0}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-box text-primary\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Active Transfers</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <p className=\"text-2xl font-bold text-neutral\">\n                      {stats?.activeTransfers || 0}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-truck text-accent\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Verified Drugs</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <p className=\"text-2xl font-bold text-neutral\">\n                      {stats?.verifiedDrugs || 0}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-shield-check text-secondary\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600 mb-1\">Gas Used (ETH)</p>\n                  {statsLoading ? (\n                    <Skeleton className=\"h-8 w-20\" />\n                  ) : (\n                    <p className=\"text-2xl font-bold text-neutral\">\n                      {stats?.gasUsed || \"0.0000\"}\n                    </p>\n                  )}\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <i className=\"fab fa-ethereum text-purple-600\"></i>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        {/* Recent Drug Batches */}\n        <div className=\"lg:col-span-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-between\">\n                <span>Recent Drug Batches</span>\n                <select className=\"text-sm border border-gray-300 rounded-lg px-3 py-1.5 focus:ring-2 focus:ring-primary/20 focus:border-primary\">\n                  <option>All Status</option>\n                  <option>In Transit</option>\n                  <option>Delivered</option>\n                  <option>Expired</option>\n                </select>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {batchesLoading ? (\n                <div className=\"space-y-4\">\n                  {[...Array(3)].map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-10 w-10 rounded-full\" />\n                      <div className=\"space-y-2 flex-1\">\n                        <Skeleton className=\"h-4 w-full\" />\n                        <Skeleton className=\"h-3 w-3/4\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : recentBatches && recentBatches.length > 0 ? (\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead>\n                      <tr className=\"border-b border-gray-100\">\n                        <th className=\"text-left text-sm font-medium text-gray-600 pb-3\">\n                          Batch ID\n                        </th>\n                        <th className=\"text-left text-sm font-medium text-gray-600 pb-3\">\n                          Drug Name\n                        </th>\n                        <th className=\"text-left text-sm font-medium text-gray-600 pb-3\">\n                          Current Owner\n                        </th>\n                        <th className=\"text-left text-sm font-medium text-gray-600 pb-3\">\n                          Status\n                        </th>\n                        <th className=\"text-left text-sm font-medium text-gray-600 pb-3\">\n                          Expiry\n                        </th>\n                        <th className=\"text-right text-sm font-medium text-gray-600 pb-3\">\n                          Actions\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody className=\"divide-y divide-gray-50\">\n                      {recentBatches.map((batch) => (\n                        <tr key={batch.id} className=\"hover:bg-gray-50\">\n                          <td className=\"py-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div className=\"w-2 h-2 bg-green-500 rounded-full\"></div>\n                              <span className=\"font-mono text-sm text-neutral\">\n                                {batch.batchId}\n                              </span>\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <div>\n                              <p className=\"font-medium text-neutral\">\n                                {batch.drugName}\n                              </p>\n                              <p className=\"text-sm text-gray-600\">\n                                {batch.manufacturer}\n                              </p>\n                            </div>\n                          </td>\n                          <td className=\"py-4\">\n                            <span className=\"text-sm text-gray-900\">\n                              {batch.currentOwner}\n                            </span>\n                          </td>\n                          <td className=\"py-4\">\n                            <Badge variant={getStatusBadgeVariant(batch.status)}>\n                              {formatStatus(batch.status)}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4\">\n                            <span className=\"text-sm text-neutral\">\n                              {new Date(batch.expiryDate).toLocaleDateString()}\n                            </span>\n                          </td>\n                          <td className=\"py-4 text-right\">\n                            <div className=\"flex items-center justify-end space-x-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => setSelectedDrug(batch)}\n                                className=\"text-primary hover:text-primary/80\"\n                              >\n                                View\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleGenerateQR(batch)}\n                                className=\"text-gray-600 hover:text-primary\"\n                              >\n                                <i className=\"fas fa-qrcode\"></i>\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <i className=\"fas fa-box-open text-4xl text-gray-300 mb-4\"></i>\n                  <p className=\"text-gray-500\">No drug batches found</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions Sidebar */}\n        <div className=\"space-y-6\">\n          <DrugRegistrationForm />\n          <DrugVerification />\n          <SupplyChainTimeline />\n        </div>\n      </div>\n\n      {/* Drug Details Modal */}\n      {selectedDrug && (\n        <DrugDetailsModal\n          drug={selectedDrug}\n          isOpen={!!selectedDrug}\n          onClose={() => setSelectedDrug(null)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":13911},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/register-drug.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { DrugRegistrationForm } from \"@/components/drug-registration-form\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\n\nexport default function RegisterDrug() {\n  const { isConnected, account, userRole } = useBlockchain();\n\n  if (!isConnected || !account) {\n    return (\n      <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <Card>\n          <CardContent className=\"pt-6 text-center\">\n            <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-wallet text-primary text-2xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold mb-2\">Connect Your Wallet</h3>\n            <p className=\"text-gray-600 mb-4\">\n              Please connect your MetaMask wallet to register drug batches\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-neutral mb-2\">Register New Drug Batch</h2>\n        <p className=\"text-gray-600\">\n          Create a new pharmaceutical drug batch record on the blockchain\n        </p>\n      </div>\n\n      {userRole && userRole !== \"manufacturer\" && (\n        <Alert className=\"mb-6\">\n          <i className=\"fas fa-info-circle\"></i>\n          <AlertDescription>\n            You are currently registered as a \"{userRole}\". Typically, only manufacturers \n            register new drug batches. Please ensure you have the proper authorization.\n          </AlertDescription>\n        </Alert>\n      )}\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2\">\n          <DrugRegistrationForm />\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Registration Guidelines</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-check text-primary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Unique Batch ID</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Use a unique identifier like \"BTC-2024-001\"\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-check text-primary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Valid Expiry Date</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Must be in the future for successful registration\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-check text-primary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Certificate Upload</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Optional but recommended for verification\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-primary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-check text-primary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Gas Fees</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Ensure you have enough Goerli ETH for transaction\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">What Happens Next?</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary font-semibold text-sm\">1</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Certificate uploaded to IPFS for secure storage\n                </p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary font-semibold text-sm\">2</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  Drug metadata recorded on Ethereum blockchain\n                </p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary font-semibold text-sm\">3</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  NFT token created representing the drug batch\n                </p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                  <span className=\"text-primary font-semibold text-sm\">4</span>\n                </div>\n                <p className=\"text-sm text-gray-600\">\n                  QR code generated for easy verification\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6392},"client/src/pages/track-supply-chain.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst trackingSchema = z.object({\n  batchId: z.string().min(1, \"Batch ID is required\"),\n});\n\nconst transferSchema = z.object({\n  batchId: z.string().min(1, \"Batch ID is required\"),\n  newOwner: z.string().min(1, \"New owner is required\"),\n  newOwnerAddress: z.string().regex(/^0x[a-fA-F0-9]{40}$/, \"Invalid Ethereum address\"),\n  eventType: z.string().min(1, \"Event type is required\"),\n});\n\ntype TrackingData = z.infer<typeof trackingSchema>;\ntype TransferData = z.infer<typeof transferSchema>;\n\ninterface DrugBatch {\n  id: string;\n  batchId: string;\n  drugName: string;\n  manufacturer: string;\n  currentOwner: string;\n  currentOwnerAddress: string;\n  status: string;\n  expiryDate: string;\n  createdAt: string;\n}\n\ninterface SupplyChainEvent {\n  id: string;\n  fromOwner?: string;\n  toOwner: string;\n  fromOwnerAddress?: string;\n  toOwnerAddress: string;\n  eventType: string;\n  transactionHash?: string;\n  timestamp: string;\n}\n\nexport default function TrackSupplyChain() {\n  const { account, contract, isConnected } = useBlockchain();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedDrug, setSelectedDrug] = useState<DrugBatch | null>(null);\n  const [supplyChainEvents, setSupplyChainEvents] = useState<SupplyChainEvent[]>([]);\n  const [showTransferForm, setShowTransferForm] = useState(false);\n\n  const trackingForm = useForm<TrackingData>({\n    resolver: zodResolver(trackingSchema),\n    defaultValues: { batchId: \"\" },\n  });\n\n  const transferForm = useForm<TransferData>({\n    resolver: zodResolver(transferSchema),\n    defaultValues: {\n      batchId: \"\",\n      newOwner: \"\",\n      newOwnerAddress: \"\",\n      eventType: \"transfer\",\n    },\n  });\n\n  // Fetch drug batches owned by current user\n  const { data: ownedDrugs, isLoading: drugsLoading } = useQuery<DrugBatch[]>({\n    queryKey: [\"/api/drug-batches/owned\", account],\n    enabled: isConnected && !!account,\n  });\n\n  const trackDrugMutation = useMutation({\n    mutationFn: async (batchId: string) => {\n      const response = await apiRequest(\"GET\", `/api/drug-batches/track/${encodeURIComponent(batchId)}`);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setSelectedDrug(data.drug);\n      setSupplyChainEvents(data.events || []);\n      transferForm.setValue(\"batchId\", data.drug.batchId);\n      toast({\n        title: \"Drug Tracked\",\n        description: \"Supply chain history loaded successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Tracking Failed\",\n        description: error instanceof Error ? error.message : \"Failed to track drug batch\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const transferOwnershipMutation = useMutation({\n    mutationFn: async (data: TransferData) => {\n      const response = await apiRequest(\"POST\", \"/api/drug-batches/transfer\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/drug-batches\"] });\n      setShowTransferForm(false);\n      transferForm.reset();\n      // Refresh tracking data\n      if (selectedDrug) {\n        trackDrugMutation.mutate(selectedDrug.batchId);\n      }\n      toast({\n        title: \"Ownership Transferred\",\n        description: \"Drug ownership has been successfully transferred\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Transfer Failed\",\n        description: error instanceof Error ? error.message : \"Failed to transfer ownership\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onTrackSubmit = (data: TrackingData) => {\n    trackDrugMutation.mutate(data.batchId);\n  };\n\n  const onTransferSubmit = async (data: TransferData) => {\n    if (!contract || !selectedDrug) return;\n\n    try {\n      // Call smart contract to transfer ownership\n      const tx = await contract.transferOwnership(\n        selectedDrug.tokenId,\n        data.newOwnerAddress,\n        data.eventType\n      );\n      \n      const receipt = await tx.wait();\n      \n      // Update backend with transaction details\n      await transferOwnershipMutation.mutateAsync({\n        ...data,\n        transactionHash: receipt.transactionHash,\n      });\n    } catch (error) {\n      toast({\n        title: \"Blockchain Transfer Failed\",\n        description: error instanceof Error ? error.message : \"Failed to execute blockchain transaction\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"delivered\":\n        return \"default\";\n      case \"in_transit\":\n        return \"secondary\";\n      case \"manufactured\":\n        return \"outline\";\n      case \"expired\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.replace(\"_\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  const getEventIcon = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"manufacture\":\n        return \"fas fa-industry\";\n      case \"transfer\":\n        return \"fas fa-truck\";\n      case \"distribute\":\n        return \"fas fa-warehouse\";\n      case \"deliver\":\n        return \"fas fa-store\";\n      case \"verify\":\n        return \"fas fa-shield-check\";\n      default:\n        return \"fas fa-arrow-right\";\n    }\n  };\n\n  const getEventColor = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"manufacture\":\n        return \"bg-green-500\";\n      case \"transfer\":\n        return \"bg-amber-500\";\n      case \"distribute\":\n        return \"bg-blue-500\";\n      case \"deliver\":\n        return \"bg-purple-500\";\n      case \"verify\":\n        return \"bg-secondary\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const canTransfer = selectedDrug && account && selectedDrug.currentOwnerAddress.toLowerCase() === account.toLowerCase();\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-neutral mb-2\">Track Supply Chain</h2>\n        <p className=\"text-gray-600\">\n          Monitor drug batches through their complete supply chain journey\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Tracking Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-search text-primary\"></i>\n                <span>Track Drug Batch</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...trackingForm}>\n                <form onSubmit={trackingForm.handleSubmit(onTrackSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={trackingForm.control}\n                    name=\"batchId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Batch ID</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Enter batch ID (e.g., BTC-2024-001)\"\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    disabled={trackDrugMutation.isPending}\n                    className=\"bg-primary text-white hover:bg-primary/90\"\n                  >\n                    {trackDrugMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Tracking...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-route mr-2\"></i>\n                        Track Supply Chain\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Drug Details */}\n          {selectedDrug && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span>Drug Batch Information</span>\n                  <div className=\"flex items-center space-x-2\">\n                    <Badge variant={getStatusBadgeVariant(selectedDrug.status)}>\n                      {formatStatus(selectedDrug.status)}\n                    </Badge>\n                    {canTransfer && (\n                      <Button\n                        size=\"sm\"\n                        onClick={() => setShowTransferForm(!showTransferForm)}\n                        className=\"bg-accent text-white hover:bg-accent/90\"\n                      >\n                        <i className=\"fas fa-exchange-alt mr-1\"></i>\n                        Transfer\n                      </Button>\n                    )}\n                  </div>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Batch ID</label>\n                      <p className=\"font-mono text-neutral bg-gray-50 px-3 py-2 rounded-md\">\n                        {selectedDrug.batchId}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Drug Name</label>\n                      <p className=\"text-neutral font-medium\">{selectedDrug.drugName}</p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Manufacturer</label>\n                      <p className=\"text-neutral\">{selectedDrug.manufacturer}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-3\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Current Owner</label>\n                      <p className=\"text-neutral\">{selectedDrug.currentOwner}</p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Owner Address</label>\n                      <p className=\"font-mono text-xs text-gray-500 break-all\">\n                        {selectedDrug.currentOwnerAddress}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600\">Expiry Date</label>\n                      <p className=\"text-neutral\">\n                        {new Date(selectedDrug.expiryDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Transfer Ownership Form */}\n          {showTransferForm && selectedDrug && canTransfer && (\n            <Card className=\"border-accent\">\n              <CardHeader>\n                <CardTitle className=\"flex items-center space-x-2 text-accent\">\n                  <i className=\"fas fa-exchange-alt\"></i>\n                  <span>Transfer Ownership</span>\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <Form {...transferForm}>\n                  <form onSubmit={transferForm.handleSubmit(onTransferSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={transferForm.control}\n                      name=\"newOwner\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>New Owner Name</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., Central Distributor\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={transferForm.control}\n                      name=\"newOwnerAddress\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>New Owner Ethereum Address</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"0x...\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={transferForm.control}\n                      name=\"eventType\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Transfer Type</FormLabel>\n                          <Select onValueChange={field.onChange} defaultValue={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select transfer type\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"transfer\">Transfer</SelectItem>\n                              <SelectItem value=\"distribute\">Distribute</SelectItem>\n                              <SelectItem value=\"deliver\">Deliver</SelectItem>\n                              <SelectItem value=\"sell\">Sell</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        type=\"submit\"\n                        disabled={transferOwnershipMutation.isPending}\n                        className=\"bg-accent text-white hover:bg-accent/90\"\n                      >\n                        {transferOwnershipMutation.isPending ? (\n                          <>\n                            <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                            Transferring...\n                          </>\n                        ) : (\n                          <>\n                            <i className=\"fas fa-check mr-2\"></i>\n                            Confirm Transfer\n                          </>\n                        )}\n                      </Button>\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        onClick={() => setShowTransferForm(false)}\n                      >\n                        Cancel\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Supply Chain Timeline */}\n          {supplyChainEvents.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Supply Chain Timeline</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"relative\">\n                  <div className=\"absolute left-4 top-0 bottom-0 w-0.5 bg-gray-200\"></div>\n                  <div className=\"space-y-6\">\n                    {supplyChainEvents.map((event, index) => (\n                      <div key={event.id} className=\"relative flex items-start space-x-4\">\n                        <div className={`w-8 h-8 ${getEventColor(event.eventType)} rounded-full flex items-center justify-center relative z-10`}>\n                          <i className={`${getEventIcon(event.eventType)} text-white text-xs`}></i>\n                        </div>\n                        <div className=\"flex-1 min-w-0 pb-4\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <p className=\"font-medium text-neutral capitalize\">\n                              {event.eventType.replace(\"_\", \" \")}\n                            </p>\n                            <span className=\"text-sm text-gray-500\">\n                              {new Date(event.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <div className=\"text-sm text-gray-600\">\n                            {event.fromOwner ? (\n                              <p>\n                                <span className=\"font-medium\">{event.fromOwner}</span> → <span className=\"font-medium\">{event.toOwner}</span>\n                              </p>\n                            ) : (\n                              <p>\n                                <span className=\"font-medium\">{event.toOwner}</span>\n                              </p>\n                            )}\n                          </div>\n                          {event.transactionHash && (\n                            <div className=\"mt-2\">\n                              <a\n                                href={`https://goerli.etherscan.io/tx/${event.transactionHash}`}\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                                className=\"inline-flex items-center space-x-1 text-xs text-primary hover:text-primary/80\"\n                              >\n                                <i className=\"fas fa-external-link-alt\"></i>\n                                <span>View Transaction</span>\n                              </a>\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          {/* My Drug Batches */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">My Drug Batches</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {!isConnected ? (\n                <p className=\"text-sm text-gray-600\">Connect wallet to view your drug batches</p>\n              ) : drugsLoading ? (\n                <div className=\"space-y-3\">\n                  {[...Array(3)].map((_, i) => (\n                    <Skeleton key={i} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : ownedDrugs && ownedDrugs.length > 0 ? (\n                <div className=\"space-y-3\">\n                  {ownedDrugs.map((drug) => (\n                    <div\n                      key={drug.id}\n                      className=\"p-3 border border-gray-200 rounded-lg hover:bg-gray-50 cursor-pointer\"\n                      onClick={() => trackingForm.setValue(\"batchId\", drug.batchId)}\n                    >\n                      <p className=\"font-mono text-sm text-neutral\">{drug.batchId}</p>\n                      <p className=\"text-xs text-gray-600 mt-1\">{drug.drugName}</p>\n                      <Badge size=\"sm\" variant={getStatusBadgeVariant(drug.status)} className=\"mt-2\">\n                        {formatStatus(drug.status)}\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <p className=\"text-sm text-gray-600\">No drug batches found</p>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Supply Chain Stages */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Supply Chain Stages</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-green-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-industry text-white text-xs\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Manufacturing</p>\n                    <p className=\"text-xs text-gray-600\">Drug batch created</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-amber-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-truck text-white text-xs\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Transfer</p>\n                    <p className=\"text-xs text-gray-600\">Ownership changes</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-warehouse text-white text-xs\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Distribution</p>\n                    <p className=\"text-xs text-gray-600\">Sent to distributors</p>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center\">\n                    <i className=\"fas fa-store text-white text-xs\"></i>\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">Delivery</p>\n                    <p className=\"text-xs text-gray-600\">Final destination</p>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":22979},"client/src/pages/verify-drug.tsx":{"content":"import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\nimport { useIPFS } from \"@/hooks/use-ipfs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { downloadQRCode, createDrugQRData } from \"@/utils/qr-code\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nconst verificationSchema = z.object({\n  batchId: z.string().min(1, \"Batch ID is required\"),\n});\n\ntype VerificationData = z.infer<typeof verificationSchema>;\n\ninterface DrugDetails {\n  id: string;\n  batchId: string;\n  drugName: string;\n  manufacturer: string;\n  manufacturingDate: string;\n  expiryDate: string;\n  currentOwner: string;\n  currentOwnerAddress: string;\n  status: string;\n  ipfsHash?: string;\n  contractAddress?: string;\n  tokenId?: string;\n  createdAt: string;\n}\n\ninterface SupplyChainEvent {\n  id: string;\n  fromOwner?: string;\n  toOwner: string;\n  fromOwnerAddress?: string;\n  toOwnerAddress: string;\n  eventType: string;\n  transactionHash?: string;\n  timestamp: string;\n}\n\nexport default function VerifyDrug() {\n  const { contract, isConnected } = useBlockchain();\n  const { retrieveFile } = useIPFS();\n  const { toast } = useToast();\n  const [verifiedDrug, setVerifiedDrug] = useState<DrugDetails | null>(null);\n  const [supplyChainEvents, setSupplyChainEvents] = useState<SupplyChainEvent[]>([]);\n  const [certificateUrl, setCertificateUrl] = useState<string | null>(null);\n  const [isVerifying, setIsVerifying] = useState(false);\n\n  const form = useForm<VerificationData>({\n    resolver: zodResolver(verificationSchema),\n    defaultValues: {\n      batchId: \"\",\n    },\n  });\n\n  // Get batch ID from URL parameters\n  const urlParams = new URLSearchParams(window.location.search);\n  const urlBatchId = urlParams.get('batchId');\n\n  // Auto-fill form if batch ID is in URL\n  React.useEffect(() => {\n    if (urlBatchId && !form.getValues('batchId')) {\n      form.setValue('batchId', urlBatchId);\n    }\n  }, [urlBatchId, form]);\n\n  const verifyDrugMutation = useMutation({\n    mutationFn: async (batchId: string) => {\n      const response = await apiRequest(\"GET\", `/api/drug-batches/verify/${encodeURIComponent(batchId)}`);\n      return response.json();\n    },\n    onSuccess: async (data) => {\n      setVerifiedDrug(data.drug);\n      setSupplyChainEvents(data.events || []);\n\n      // Retrieve certificate from IPFS if available\n      if (data.drug.ipfsHash) {\n        try {\n          const url = await retrieveFile(data.drug.ipfsHash);\n          setCertificateUrl(url);\n        } catch (error) {\n          console.error(\"Failed to retrieve certificate:\", error);\n        }\n      }\n\n      toast({\n        title: \"Drug Verified\",\n        description: \"Drug batch has been successfully verified\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Verification Failed\",\n        description: error instanceof Error ? error.message : \"Drug batch not found or invalid\",\n        variant: \"destructive\",\n      });\n      setVerifiedDrug(null);\n      setSupplyChainEvents([]);\n      setCertificateUrl(null);\n    },\n  });\n\n  const onSubmit = async (data: VerificationData) => {\n    setIsVerifying(true);\n    try {\n      await verifyDrugMutation.mutateAsync(data.batchId);\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const handleGenerateQR = async () => {\n    if (verifiedDrug) {\n      try {\n        const qrData = createDrugQRData(verifiedDrug.batchId, verifiedDrug.tokenId);\n        await downloadQRCode(qrData, `DrugAuth-${verifiedDrug.batchId}`);\n        toast({\n          title: \"QR Code Generated\",\n          description: `QR code for batch ${verifiedDrug.batchId} has been downloaded`,\n        });\n      } catch (error) {\n        toast({\n          title: \"QR Generation Failed\",\n          description: \"Failed to generate QR code\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"delivered\":\n        return \"default\";\n      case \"in_transit\":\n        return \"secondary\";\n      case \"manufactured\":\n        return \"outline\";\n      case \"expired\":\n        return \"destructive\";\n      default:\n        return \"outline\";\n    }\n  };\n\n  const formatStatus = (status: string) => {\n    return status.replace(\"_\", \" \").replace(/\\b\\w/g, (l) => l.toUpperCase());\n  };\n\n  const getEventIcon = (eventType: string) => {\n    switch (eventType.toLowerCase()) {\n      case \"manufacture\":\n        return \"fas fa-industry\";\n      case \"transfer\":\n        return \"fas fa-truck\";\n      case \"distribute\":\n        return \"fas fa-warehouse\";\n      case \"deliver\":\n        return \"fas fa-store\";\n      case \"verify\":\n        return \"fas fa-shield-check\";\n      default:\n        return \"fas fa-arrow-right\";\n    }\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n      <div className=\"mb-8\">\n        <h2 className=\"text-2xl font-bold text-neutral mb-2\">Verify Drug Batch</h2>\n        <p className=\"text-gray-600\">\n          Enter a batch ID or scan a QR code to verify drug authenticity and view supply chain history\n        </p>\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n        <div className=\"lg:col-span-2 space-y-6\">\n          {/* Verification Form */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center space-x-2\">\n                <i className=\"fas fa-search text-secondary\"></i>\n                <span>Drug Verification</span>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"batchId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Batch ID or QR Code Data</FormLabel>\n                        <div className=\"flex space-x-2\">\n                          <FormControl>\n                            <Input\n                              placeholder=\"Enter batch ID (e.g., BTC-2024-001)\"\n                              {...field}\n                              className=\"flex-1\"\n                            />\n                          </FormControl>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            className=\"px-3\"\n                            title=\"Scan QR Code\"\n                            disabled={true} // QR scanning would need camera API\n                          >\n                            <i className=\"fas fa-qrcode\"></i>\n                          </Button>\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isVerifying || verifyDrugMutation.isPending}\n                    className=\"w-full bg-secondary text-white hover:bg-secondary/90\"\n                  >\n                    {isVerifying || verifyDrugMutation.isPending ? (\n                      <>\n                        <i className=\"fas fa-spinner fa-spin mr-2\"></i>\n                        Verifying...\n                      </>\n                    ) : (\n                      <>\n                        <i className=\"fas fa-shield-check mr-2\"></i>\n                        Verify Drug\n                      </>\n                    )}\n                  </Button>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n\n          {/* Verification Result */}\n          {verifiedDrug && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center justify-between\">\n                  <span className=\"flex items-center space-x-2\">\n                    <i className=\"fas fa-check-circle text-green-600\"></i>\n                    <span>Drug Verified ✓</span>\n                  </span>\n                  <Badge variant={getStatusBadgeVariant(verifiedDrug.status)}>\n                    {formatStatus(verifiedDrug.status)}\n                  </Badge>\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Batch ID</label>\n                      <p className=\"font-mono text-neutral bg-gray-50 px-3 py-2 rounded-md\">\n                        {verifiedDrug.batchId}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Drug Name</label>\n                      <p className=\"text-neutral font-medium\">{verifiedDrug.drugName}</p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Manufacturer</label>\n                      <p className=\"text-neutral\">{verifiedDrug.manufacturer}</p>\n                    </div>\n                  </div>\n                  <div className=\"space-y-4\">\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Manufacturing Date</label>\n                      <p className=\"text-neutral\">\n                        {new Date(verifiedDrug.manufacturingDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Expiry Date</label>\n                      <p className=\"text-neutral\">\n                        {new Date(verifiedDrug.expiryDate).toLocaleDateString()}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"block text-sm font-medium text-gray-600 mb-1\">Current Owner</label>\n                      <p className=\"text-neutral\">{verifiedDrug.currentOwner}</p>\n                    </div>\n                  </div>\n                </div>\n\n                {certificateUrl && (\n                  <div className=\"p-4 bg-blue-50 border border-blue-200 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 mb-2\">Certificate & Documents</h4>\n                    <div className=\"flex items-center space-x-2\">\n                      <i className=\"fas fa-file-alt text-blue-600\"></i>\n                      <a\n                        href={certificateUrl}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                      >\n                        View Certificate (IPFS)\n                      </a>\n                    </div>\n                  </div>\n                )}\n\n                <div className=\"flex items-center space-x-4\">\n                  <Button\n                    onClick={handleGenerateQR}\n                    variant=\"outline\"\n                    className=\"flex items-center space-x-2\"\n                  >\n                    <i className=\"fas fa-qrcode\"></i>\n                    <span>Generate QR Code</span>\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Supply Chain History */}\n          {supplyChainEvents.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Supply Chain History</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {supplyChainEvents.map((event, index) => (\n                    <div key={event.id} className=\"border border-gray-200 rounded-lg p-4\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center mt-1\">\n                          <i className={`${getEventIcon(event.eventType)} text-primary text-xs`}></i>\n                        </div>\n                        <div className=\"flex-1\">\n                          <div className=\"flex items-center justify-between\">\n                            <p className=\"font-medium text-neutral capitalize\">\n                              {event.eventType.replace(\"_\", \" \")}\n                            </p>\n                            <span className=\"text-sm text-gray-600\">\n                              {new Date(event.timestamp).toLocaleString()}\n                            </span>\n                          </div>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            {event.fromOwner ? `${event.fromOwner} → ` : \"\"}{event.toOwner}\n                          </p>\n                          {event.transactionHash && (\n                            <p className=\"text-sm text-gray-500 mt-1 font-mono\">\n                              Tx: {event.transactionHash.slice(0, 10)}...{event.transactionHash.slice(-8)}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Sidebar */}\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Verification Guide</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-secondary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-info text-secondary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Enter Batch ID</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Type the exact batch ID from the drug package\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-secondary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-qrcode text-secondary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">QR Code Scanning</p>\n                  <p className=\"text-xs text-gray-600\">\n                    Scan the QR code on the drug package for quick verification\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex items-start space-x-3\">\n                <div className=\"w-6 h-6 bg-secondary/10 rounded-full flex items-center justify-center mt-0.5\">\n                  <i className=\"fas fa-shield-check text-secondary text-xs\"></i>\n                </div>\n                <div>\n                  <p className=\"font-medium text-sm\">Blockchain Verification</p>\n                  <p className=\"text-xs text-gray-600\">\n                    All data is verified against the immutable blockchain record\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">What You'll See</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-50 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-check text-green-600 text-sm\"></i>\n                </div>\n                <p className=\"text-sm text-gray-600\">Complete drug information</p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-50 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-route text-green-600 text-sm\"></i>\n                </div>\n                <p className=\"text-sm text-gray-600\">Full supply chain history</p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-50 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-certificate text-green-600 text-sm\"></i>\n                </div>\n                <p className=\"text-sm text-gray-600\">Manufacturing certificates</p>\n              </div>\n\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-8 h-8 bg-green-50 rounded-full flex items-center justify-center\">\n                  <i className=\"fas fa-clock text-green-600 text-sm\"></i>\n                </div>\n                <p className=\"text-sm text-gray-600\">Real-time ownership status</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17932},"client/src/types/global.d.ts":{"content":"interface Window {\n  ethereum?: {\n    request: (args: { method: string; params?: any[] }) => Promise<any>;\n    on: (event: string, callback: (...args: any[]) => void) => void;\n    removeListener: (event: string, callback: (...args: any[]) => void) => void;\n    isMetaMask?: boolean;\n  };\n}","size_bytes":289},"client/src/utils/ethereum.ts":{"content":"// Smart contract ABI (simplified for example)\nexport const contractABI = [\n  \"function registerDrug(string memory batchId, string memory drugName, string memory manufacturer, uint256 expiryDate, string memory ipfsHash) public returns (uint256)\",\n  \"function transferOwnership(uint256 tokenId, address to) public\",\n  \"function verifyDrug(uint256 tokenId) public view returns (tuple(string batchId, string drugName, string manufacturer, uint256 expiryDate, string ipfsHash, address currentOwner, uint256 timestamp))\",\n  \"function getDrugHistory(uint256 tokenId) public view returns (tuple(address from, address to, uint256 timestamp)[])\",\n  \"function ownerOf(uint256 tokenId) public view returns (address)\",\n  \"function tokenOfOwnerByIndex(address owner, uint256 index) public view returns (uint256)\",\n  \"function balanceOf(address owner) public view returns (uint256)\",\n  \"event DrugRegistered(uint256 indexed tokenId, string batchId, address indexed owner)\",\n  \"event OwnershipTransferred(uint256 indexed tokenId, address indexed from, address indexed to)\",\n];\n\n// Contract address on Goerli testnet (replace with actual deployed address)\nexport const contractAddress = import.meta.env.VITE_CONTRACT_ADDRESS || \"0x1234567890123456789012345678901234567890\";\n\n// Ethereum utility functions\nexport const formatAddress = (address: string): string => {\n  return `${address.slice(0, 6)}...${address.slice(-4)}`;\n};\n\nexport const formatTokenAmount = (amount: string, decimals: number = 18): string => {\n  const value = parseFloat(amount);\n  return (value / Math.pow(10, decimals)).toFixed(4);\n};\n\nexport const isValidAddress = (address: string): boolean => {\n  return /^0x[a-fA-F0-9]{40}$/.test(address);\n};\n\n// Network configuration\nexport const GOERLI_NETWORK = {\n  chainId: \"0x5\",\n  chainName: \"Goerli Testnet\",\n  nativeCurrency: {\n    name: \"ETH\",\n    symbol: \"ETH\",\n    decimals: 18,\n  },\n  rpcUrls: [\"https://goerli.infura.io/v3/\"],\n  blockExplorerUrls: [\"https://goerli.etherscan.io\"],\n};\n\n// Gas estimation helpers\nexport const estimateGas = {\n  registerDrug: \"200000\",\n  transferOwnership: \"100000\",\n  verifyDrug: \"50000\",\n};\n","size_bytes":2129},"client/src/utils/ipfs.ts":{"content":"// IPFS utilities using Pinata as the service provider\n// For production, you would need to add VITE_PINATA_API_KEY and VITE_PINATA_SECRET_KEY\n\nexport const uploadToIPFS = async (file: File): Promise<string> => {\n  try {\n    // For development, we'll simulate IPFS upload with a mock hash\n    // In production, this would upload to Pinata or similar IPFS service\n    const mockHash = `Qm${Math.random().toString(36).substring(2, 15)}${Math.random().toString(36).substring(2, 15)}`;\n    \n    // Simulate upload delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    console.log(`Mock IPFS upload for file: ${file.name}, hash: ${mockHash}`);\n    return mockHash;\n  } catch (error) {\n    console.error(\"Error uploading to IPFS:\", error);\n    throw new Error(\"Failed to upload file to IPFS\");\n  }\n};\n\nexport const retrieveFromIPFS = async (cid: string): Promise<string> => {\n  try {\n    // Return the IPFS gateway URL for the file\n    return `https://ipfs.io/ipfs/${cid}`;\n  } catch (error) {\n    console.error(\"Error retrieving from IPFS:\", error);\n    throw new Error(\"Failed to retrieve file from IPFS\");\n  }\n};\n\nexport const uploadJSONToIPFS = async (data: any): Promise<string> => {\n  try {\n    const jsonBlob = new Blob([JSON.stringify(data, null, 2)], {\n      type: \"application/json\",\n    });\n    const file = new File([jsonBlob], \"metadata.json\");\n    return await uploadToIPFS(file);\n  } catch (error) {\n    console.error(\"Error uploading JSON to IPFS:\", error);\n    throw new Error(\"Failed to upload JSON to IPFS\");\n  }\n};\n\nexport const retrieveJSONFromIPFS = async (cid: string): Promise<any> => {\n  try {\n    const url = await retrieveFromIPFS(cid);\n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(\"Failed to fetch JSON from IPFS\");\n    }\n    \n    return await response.json();\n  } catch (error) {\n    console.error(\"Error retrieving JSON from IPFS:\", error);\n    throw new Error(\"Failed to retrieve JSON from IPFS\");\n  }\n};\n","size_bytes":1997},"client/src/utils/qr-code.ts":{"content":"import QRCode from \"qrcode\";\n\nexport const generateQRCode = async (data: string): Promise<string> => {\n  try {\n    const qrCodeDataURL = await QRCode.toDataURL(data, {\n      width: 256,\n      margin: 2,\n      color: {\n        dark: \"#000000\",\n        light: \"#FFFFFF\",\n      },\n    });\n    return qrCodeDataURL;\n  } catch (error) {\n    console.error(\"Error generating QR code:\", error);\n    throw new Error(\"Failed to generate QR code\");\n  }\n};\n\nexport const generateQRCodeSVG = async (data: string): Promise<string> => {\n  try {\n    const qrCodeSVG = await QRCode.toString(data, {\n      type: \"svg\",\n      width: 256,\n      margin: 2,\n    });\n    return qrCodeSVG;\n  } catch (error) {\n    console.error(\"Error generating QR code SVG:\", error);\n    throw new Error(\"Failed to generate QR code SVG\");\n  }\n};\n\nexport const downloadQRCode = async (data: string, filename: string): Promise<void> => {\n  try {\n    const qrCodeDataURL = await generateQRCode(data);\n    const link = document.createElement(\"a\");\n    link.href = qrCodeDataURL;\n    link.download = `${filename}.png`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  } catch (error) {\n    console.error(\"Error downloading QR code:\", error);\n    throw new Error(\"Failed to download QR code\");\n  }\n};\n\nexport const createDrugQRData = (batchId: string, tokenId?: string): string => {\n  const baseUrl = window.location.origin;\n  const verifyUrl = `${baseUrl}/verify?batchId=${encodeURIComponent(batchId)}`;\n  \n  if (tokenId) {\n    return `${verifyUrl}&tokenId=${tokenId}`;\n  }\n  \n  return verifyUrl;\n};\n","size_bytes":1601},"client/src/components/layout/footer.tsx":{"content":"export function Footer() {\n  return (\n    <footer className=\"bg-surface border-t border-gray-200 mt-16\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <div className=\"flex items-center space-x-3 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-pills text-white text-sm\"></i>\n              </div>\n              <h3 className=\"font-bold text-neutral\">DrugAuth</h3>\n            </div>\n            <p className=\"text-gray-600 text-sm\">\n              Secure pharmaceutical supply chain tracking powered by Ethereum and IPFS.\n            </p>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-neutral mb-4\">Smart Contract</h4>\n            <div className=\"space-y-2 text-sm\">\n              <p className=\"text-gray-600\">Network: Goerli Testnet</p>\n              <p className=\"text-gray-600 font-mono\">Contract: 0x1234...5678</p>\n              <a\n                href={`https://goerli.etherscan.io/address/${process.env.CONTRACT_ADDRESS || \"\"}`}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-primary hover:text-primary/80\"\n              >\n                View on Etherscan\n              </a>\n            </div>\n          </div>\n          <div>\n            <h4 className=\"font-semibold text-neutral mb-4\">Resources</h4>\n            <div className=\"space-y-2 text-sm\">\n              <a href=\"#\" className=\"block text-gray-600 hover:text-primary\">\n                Documentation\n              </a>\n              <a href=\"#\" className=\"block text-gray-600 hover:text-primary\">\n                API Reference\n              </a>\n              <a href=\"#\" className=\"block text-gray-600 hover:text-primary\">\n                GitHub Repository\n              </a>\n              <a\n                href=\"https://goerlifaucet.com\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"block text-gray-600 hover:text-primary\"\n              >\n                Get Goerli ETH\n              </a>\n            </div>\n          </div>\n        </div>\n        <div className=\"border-t border-gray-200 mt-8 pt-8 text-center\">\n          <p className=\"text-sm text-gray-600\">\n            Built with React, Solidity, Hardhat & IPFS | Open Source\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":2513},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { WalletConnection } from \"../wallet-connection\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { useBlockchain } from \"@/hooks/use-blockchain\";\n\nexport function Header() {\n  const [location] = useLocation();\n  const { userRole } = useBlockchain();\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);\n\n  const navigation = [\n    { name: \"Dashboard\", href: \"/dashboard\" },\n    { name: \"Register Drug\", href: \"/register\" },\n    { name: \"Verify\", href: \"/verify\" },\n    { name: \"Track Supply Chain\", href: \"/track\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/dashboard\" && (location === \"/\" || location === \"/dashboard\")) {\n      return true;\n    }\n    return location === href;\n  };\n\n  return (\n    <header className=\"bg-surface shadow-sm border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          <div className=\"flex items-center space-x-4\">\n            <Link href=\"/\" className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-pills text-white text-sm\"></i>\n              </div>\n              <h1 className=\"text-xl font-bold text-neutral\">DrugAuth</h1>\n            </Link>\n            \n            <nav className=\"hidden md:flex space-x-6 ml-8\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`transition-colors ${\n                    isActive(item.href)\n                      ? \"text-primary font-medium border-b-2 border-primary pb-1\"\n                      : \"text-gray-600 hover:text-primary\"\n                  }`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n          </div>\n\n          <div className=\"flex items-center space-x-4\">\n            <WalletConnection />\n            \n            {userRole && (\n              <div className=\"hidden sm:block px-3 py-1.5 bg-primary/10 rounded-lg\">\n                <span className=\"text-sm font-medium text-primary capitalize\">\n                  {userRole}\n                </span>\n              </div>\n            )}\n\n            <div className=\"hidden sm:flex items-center space-x-2 px-3 py-1.5 bg-blue-50 rounded-lg border border-blue-200\">\n              <i className=\"fas fa-network-wired text-blue-600 text-xs\"></i>\n              <span className=\"text-sm text-blue-700 font-medium\">Goerli</span>\n            </div>\n\n            <Sheet open={mobileMenuOpen} onOpenChange={setMobileMenuOpen}>\n              <SheetTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"md:hidden p-2 text-gray-600 hover:text-primary\"\n                >\n                  <i className=\"fas fa-bars\"></i>\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"w-[300px]\">\n                <div className=\"flex flex-col space-y-4 mt-6\">\n                  {navigation.map((item) => (\n                    <Link\n                      key={item.name}\n                      href={item.href}\n                      className={`block px-3 py-2 rounded-md text-base font-medium transition-colors ${\n                        isActive(item.href)\n                          ? \"text-primary bg-primary/10\"\n                          : \"text-gray-600 hover:text-primary hover:bg-gray-50\"\n                      }`}\n                      onClick={() => setMobileMenuOpen(false)}\n                    >\n                      {item.name}\n                    </Link>\n                  ))}\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4066},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}